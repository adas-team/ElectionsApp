{"ast":null,"code":"var _jsxFileName = \"/Users/xinyuexiang/Desktop/election/src/components/votepart/votepart.jsx\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport $ from \"jquery\";\nlet time;\n\nclass TrainingPart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.startReading = async () => {\n      let index = 0;\n      await setTimeout(() => {\n        time = setInterval(async () => {\n          if (index < this.state.length) {\n            await $(`.${this.state.currParaArray[index]}`).css(\"color\", \"#e9ecef\");\n            index += 1;\n          } else {\n            await this.setState({\n              readDone: true\n            });\n            clearInterval(time);\n          }\n        }, 300);\n      }, 1000);\n    };\n\n    this.changeQuestion = async () => {\n      await this.setState({\n        currentParaNum: this.state.currentParaNum + 1,\n        currPara: this.state.paragraphs[this.state.currentParaNum],\n        readDone: false,\n        answerred: false\n      });\n      this.startReading();\n    };\n\n    this.state = {\n      level: 1,\n      score: 0,\n      currentParaNum: 0,\n      maxNumOfQues: 4,\n      currPara: \"Position1 Description\",\n      currParaArray: [],\n      length: 0,\n      readDone: false,\n      answerred: false,\n      paragraphs: [\"Position2 Description\", \"Position3 Description\", \"Position4 Description\", \"Position5 Description\"],\n      questions: [\"Who you want to vote\"],\n      choices: [[\"A\", \"B\", \"C\", \"D\"]],\n      answers: [\"A\"],\n      youtAnswer: null\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, this.state.readDone ? this.state.answerred ? this.state.currentParaNum < this.state.maxNumOfQues ? React.createElement(\"button\", {\n      onClick: this.changeQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Next Question \") : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"You have finish all the training questions!\"), React.createElement(Link, {\n      to: \"/user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Go Back Home\")) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, this.state.questions[0]), this.state.choices[0].map(choice => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"radio\",\n      value: choice,\n      defaultChecked: false,\n      onClick: this.checkAnswer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), choice))) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, this.state.currParaArray ? React.createElement(\"div\", {\n      className: \"row\",\n      style: {\n        paddingLeft: 30,\n        fontSize: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, this.state.currParaArray.map(word => React.createElement(\"div\", {\n      className: word,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"\\xA0\", word))) : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"wait for a sec ...\")));\n  }\n\n}\n\nexport default TrainingPart;","map":{"version":3,"sources":["/Users/xinyuexiang/Desktop/election/src/components/votepart/votepart.jsx"],"names":["React","Component","Link","$","time","TrainingPart","constructor","props","startReading","index","setTimeout","setInterval","state","length","currParaArray","css","setState","readDone","clearInterval","changeQuestion","currentParaNum","currPara","paragraphs","answerred","level","score","maxNumOfQues","questions","choices","answers","youtAnswer","render","map","choice","checkAnswer","paddingLeft","fontSize","word"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport $ from \"jquery\";\nlet time;\n\nclass TrainingPart extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            level: 1,\n            score: 0,\n            currentParaNum: 0,\n            maxNumOfQues: 4,\n            currPara: \"Position1 Description\",\n            currParaArray: [],\n            length: 0,\n            readDone: false,\n            answerred: false,\n            paragraphs: [\n                \"Position2 Description\",\n                \"Position3 Description\",\n                \"Position4 Description\",\n                \"Position5 Description\",\n            ],\n            questions: [\"Who you want to vote\"],\n            choices: [[\"A\", \"B\", \"C\", \"D\"]],\n            answers: [\"A\"],\n            youtAnswer: null\n        };\n\n    };\n\n\n    startReading = async() => {\n        let index = 0;\n        await setTimeout(() => {\n            time = setInterval( async() => {\n                if (index < this.state.length) {\n                    await $(`.${this.state.currParaArray[index]}`).css(\"color\", \"#e9ecef\");\n                    index += 1\n                } else {\n                    await this.setState({ readDone: true})\n                    clearInterval(time);\n                }\n            }, 300);\n        }, 1000)\n    };\n\n\n    changeQuestion = async () => {\n        await this.setState({\n            currentParaNum: this.state.currentParaNum + 1,\n            currPara: this.state.paragraphs[this.state.currentParaNum],\n            readDone: false,\n            answerred: false\n        });\n        this.startReading();\n    }\n\n    render(){\n        return(\n            <div>\n\n                {this.state.readDone\n                ?\n                    this.state.answerred\n                    ?\n                        this.state.currentParaNum < this.state.maxNumOfQues\n                        ?\n                        <button onClick={this.changeQuestion}>Next Question </button>\n                        :\n                        <div>\n                            <h2>You have finish all the training questions!</h2>\n                            <Link to=\"/user\">Go Back Home</Link>\n                        </div>\n                    :\n                    <div>\n                        {/* TODO : update the database and use <h3>{this.state.questions[this.state.currentParaNum]}</h3> */}\n                        <h3>{this.state.questions[0]}</h3>\n                        {/* TODO : update the database and use this.state.choices[this.state.currentParaNum].map(choice => ( */}\n                        {this.state.choices[0].map(choice => (\n                            <div>\n                                <input type=\"radio\" value={choice} defaultChecked={false} onClick={this.checkAnswer} />\n                                {choice}\n                            </div>\n\n                        ))}\n                    </div>\n                :\n                <div>\n                    {this.state.currParaArray\n                    ?\n                        <div className=\"row\" style={{paddingLeft:30, fontSize: 20}}>\n                        {this.state.currParaArray.map( word => (\n                            <div className={word}>&nbsp;{word}</div>\n                        ))}\n                        </div>\n                    :\n                        <p>wait for a sec ...</p>\n                    }\n                </div>\n                }\n\n            </div>\n        )\n    }\n}\n\nexport default TrainingPart;\n"]},"metadata":{},"sourceType":"module"}