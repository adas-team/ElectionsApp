{"ast":null,"code":"var _jsxFileName = \"/Users/xinyuexiang/Desktop/ElectionsApp/src/components/votepart/votepart.jsx\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport $ from \"jquery\";\nlet time;\n\nclass TrainingPart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      // TODO : query paragraphs and question based on the user level\n      // using MongoDB findAll().toArray() method\n      // this.disappearHelper(0)\n      const sentenceArray = await this.state.currPara.split(\" \");\n      let newArray = [];\n      await sentenceArray.map(word => {\n        if (word.includes(\",\") || word.includes(\"!\") || word.includes(\"?\") || word.includes(\".\")) {\n          word = word.slice(0, word.length - 1);\n        }\n\n        newArray.push(word);\n      });\n      console.log(newArray);\n      await this.setState({\n        currParaArray: newArray\n      });\n      await this.setState({\n        length: this.state.currParaArray.length\n      });\n      this.startReading();\n    };\n\n    this.componentDidUpdate = () => {// TODO : when all training done, update the newest level based on the score\n    };\n\n    this.startReading = async () => {\n      let index = 0;\n      await setTimeout(() => {\n        time = setInterval(async () => {\n          if (index < this.state.length) {\n            await $(`.${this.state.currParaArray[index]}`).css(\"color\", \"#e9ecef\");\n            index += 1;\n          } else {\n            await this.setState({\n              readDone: true\n            });\n            clearInterval(time);\n          }\n        }, 300);\n      }, 1000);\n    };\n\n    this.changeQuestion = async () => {\n      await this.setState({\n        currentParaNum: this.state.currentParaNum + 1,\n        currPara: this.state.paragraphs[this.state.currentParaNum],\n        readDone: false,\n        answerred: false\n      });\n      this.startReading();\n    };\n\n    this.state = {\n      level: 1,\n      score: 0,\n      currentParaNum: 0,\n      maxNumOfCan: 4,\n      currPara: \"It is the current position A\",\n      currParaArray: [],\n      length: 0,\n      readDone: false,\n      answerred: false,\n      paragraphs: [\"Position A\", \"Position B\", \"Position C\", \"Position D\"],\n      questions: [\"Who you wanna vote?\"],\n      choices: [[\"AAA\", \"BBB\", \"CCC\", \"DDD\"]],\n      answers: [\"School\"],\n      youtAnswer: null\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, this.state.readDone ? this.state.answerred ? this.state.currentParaNum < this.state.maxNumOfCan ? React.createElement(\"button\", {\n      onClick: this.changeQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Next VOTE \") : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"You have finish all the VOTE!\"), React.createElement(Link, {\n      to: \"/user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Go Back Home\")) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, this.state.questions[0]), this.state.choices[0].map(choice => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"radio\",\n      value: choice,\n      defaultChecked: false,\n      onClick: this.checkAnswer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), choice))) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, this.state.currParaArray ? React.createElement(\"div\", {\n      className: \"row\",\n      style: {\n        paddingLeft: 30,\n        fontSize: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, this.state.currParaArray.map(word => React.createElement(\"div\", {\n      className: word,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"\\xA0\", word))) : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"wait for a sec ...\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), \"The process: \", this.state.currentParaNum + 1, \" / \", this.state.maxNumOfCan + 1);\n  }\n\n}\n\nexport default TrainingPart;","map":{"version":3,"sources":["/Users/xinyuexiang/Desktop/ElectionsApp/src/components/votepart/votepart.jsx"],"names":["React","Component","Link","$","time","TrainingPart","constructor","props","componentDidMount","sentenceArray","state","currPara","split","newArray","map","word","includes","slice","length","push","console","log","setState","currParaArray","startReading","componentDidUpdate","index","setTimeout","setInterval","css","readDone","clearInterval","changeQuestion","currentParaNum","paragraphs","answerred","level","score","maxNumOfCan","questions","choices","answers","youtAnswer","render","choice","checkAnswer","paddingLeft","fontSize"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport $ from \"jquery\";\nlet time;\n\nclass TrainingPart extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            level: 1,\n            score: 0,\n            currentParaNum: 0,\n            maxNumOfCan: 4,\n            currPara: \"It is the current position A\",\n            currParaArray: [],\n            length: 0,\n            readDone: false,\n            answerred: false,\n            paragraphs: [\n                \"Position A\",\n                \"Position B\",\n                \"Position C\",\n                \"Position D\",\n            ],\n            questions: [\"Who you wanna vote?\"],\n            choices: [[\"AAA\", \"BBB\", \"CCC\", \"DDD\"]],\n            answers: [\"School\"],\n            youtAnswer: null\n        };\n\n    };\n\n    componentDidMount = async() => {\n        // TODO : query paragraphs and question based on the user level\n        // using MongoDB findAll().toArray() method\n        // this.disappearHelper(0)\n        const sentenceArray = await this.state.currPara.split(\" \")\n        let newArray = [];\n        await sentenceArray.map( word => {\n            if (word.includes(\",\") || word.includes(\"!\") || word.includes(\"?\") || word.includes(\".\")) {word = word.slice(0, word.length-1)}\n            newArray.push(word);\n        })\n        console.log(newArray)\n        await this.setState({currParaArray: newArray})\n        await this.setState({length: this.state.currParaArray.length})\n        this.startReading()\n    }\n\n    componentDidUpdate = () => {\n        // TODO : when all training done, update the newest level based on the score\n    }\n\n    startReading = async() => {\n        let index = 0;\n        await setTimeout(() => {\n            time = setInterval( async() => {\n                if (index < this.state.length) {\n                    await $(`.${this.state.currParaArray[index]}`).css(\"color\", \"#e9ecef\");\n                    index += 1\n                } else {\n                    await this.setState({ readDone: true})\n                    clearInterval(time);\n                }\n            }, 300);\n        }, 1000)\n    };\n\n    // checkAnswer = async(e) => {\n    //     await this.setState({ youtAnswer: e.target.value})\n    //     if (this.state.youtAnswer === this.state.answers[0]) {\n    //         this.setState({\n    //             answerred: true,\n    //             score: this.state.score + 1\n    //         })\n    //     } else {\n    //         this.setState({ answerred: true})\n    //     }\n    // }\n\n    changeQuestion = async () => {\n        await this.setState({\n            currentParaNum: this.state.currentParaNum + 1,\n            currPara: this.state.paragraphs[this.state.currentParaNum],\n            readDone: false,\n            answerred: false\n        });\n        this.startReading();\n    }\n\n    render(){\n        return(\n            <div>\n\n                {this.state.readDone\n                ?\n                    this.state.answerred\n                    ?\n                        this.state.currentParaNum < this.state.maxNumOfCan\n                        ?\n                        <button onClick={this.changeQuestion}>Next VOTE </button>\n                        :\n                        <div>\n                            <h2>You have finish all the VOTE!</h2>\n                            <Link to=\"/user\">Go Back Home</Link>\n                        </div>\n                    :\n                    <div>\n                        {/* TODO : update the database and use <h3>{this.state.questions[this.state.currentParaNum]}</h3> */}\n                        <h3>{this.state.questions[0]}</h3>\n                        {/* TODO : update the database and use this.state.choices[this.state.currentParaNum].map(choice => ( */}\n                        {this.state.choices[0].map(choice => (\n                            <div>\n                                <input type=\"radio\" value={choice} defaultChecked={false} onClick={this.checkAnswer} />\n                                {choice}\n                            </div>\n\n                        ))}\n                    </div>\n                :\n                <div>\n                    {this.state.currParaArray\n                    ?\n                        <div className=\"row\" style={{paddingLeft:30, fontSize: 20}}>\n                        {this.state.currParaArray.map( word => (\n                            <div className={word}>&nbsp;{word}</div>\n                        ))}\n                        </div>\n                    :\n                        <p>wait for a sec ...</p>\n                    }\n                </div>\n                }\n\n                <br/>The process: {this.state.currentParaNum + 1} / {this.state.maxNumOfCan + 1}\n            </div>\n        )\n    }\n}\n\nexport default TrainingPart;\n"]},"metadata":{},"sourceType":"module"}