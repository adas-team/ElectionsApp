{"version":3,"sources":["assets/AdaBotFromRight.png","assets/AdaBotSleep.png","assets/AdaBotStanding.png","firebase/config/config.js","components/Header.jsx","components/constants.js","components/pages/HomePage.jsx","components/VotePart/Position.jsx","components/VotePart/VoteDone.jsx","components/VotePart/Candidate.jsx","components/helper.js","components/VotePart/ListCandidates.jsx","components/VotePart/Vote.jsx","components/pages/Results.jsx","components/ValidateVoter/LoadEligibility.jsx","components/ValidateVoter/ValidateVoterPage.jsx","components/pages/CandidatesPage.jsx","App.js","firebase/context.js","firebase/index.js","firebase/firebase.js","index.js","assets/AdaBotHead.png"],"names":["module","exports","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ACTIVE_ITEM_PATHS","home","candidates","results","Header","handleItemClick","e","name","setState","activeItem","activeItemPath","redirect","state","undefined","this","to","Menu","size","stackable","inverted","Item","href","target","src","AdaBotHead","alt","active","onClick","position","Icon","Component","year","Date","getFullYear","yearRange","adasTeamEventOptions","key","text","value","positionDesc","President","Administration","Academic","Finance","Communications","email","speech","photoSrc","preferences","Abstain","reelectedPositions","reelectedCandidates","TextContainer","style","div","StyledSegment","Segment","GridContainer","Grid","AdaBotFromRight","MobileMessage","Message","HomePage","handleMessageDismiss","mobileMessageVisible","renderMobileMessage","negative","attached","onDismiss","header","content","visible","isMobile","verticalAlign","columns","Column","Label","as","color","ribbon","className","Button","disabled","fluid","PopupMessage","Popup","PositionName","h1","Position","wide","trigger","VoteDoneHeader","Subheader","h2","ImageBackground","AdaBotSleepImage","VoteDone","centered","width","Progress","percent","h5","PreferencesContainer","ol","RadioButton","Form","Radio","ImageResized","Image","Candidate","props","handleSelect","onSelect","candidateName","handleRate","rating","currRate","rate","getCandidateDetails","renderRadioMethod","currSelection","onChange","checked","renderRateMethod","Rating","icon","onRate","maxRating","reelect","voteMethod","abstainCard","Card","Content","textAlign","Meta","map","i","extra","getCandidateList","a","firebase","firestore","collection","get","snapshot","forEach","doc","id","candidatesForPosition","data","getPositions","candidate","nonEmptyCandidates","Object","keys","length","push","getWinners","winners","winnerForPosition","ListCandidates","setCandidateList","updateVote","candidateRanking","values","renderCandidates","currCandidates","sort","reverse","Group","grouped","widths","itemsPerRow","VOTE_METHOD","VoteHeader","ProgressBar","DividerPadded","Divider","SubmitButton","Vote","initVote","positions","votes","currPosition","1","2","3","card","currVote","renderPositions","validVote","num_votes","handleSubmit","voter","console","log","addVote","updateVoteCount","database","ref","child","orderByChild","equalTo","once","numChildren","voterWithVotes","voterKey","val","set","increment","FieldValue","voteCount","collectionName","update","renderLoader","Dimmer","page","Loader","loading","setTimeout","ResultsHeader","PlaceholderContainer","Placeholder","resultsPending","resultsComputed","Results","computeWinners","candidateList","getWinnerForPosition","addWinner","winner","max","currCandidate","tiedWith","getWinner","getWinnerPhoto","winnerName","renderPlaceholders","square","Line","Paragraph","VALID_PASS_CONFIG","iconName","path","messageBgColor","messageHeader","messageContent","buttonContent","VALID_FAIL_CONFIG","LoadEligibility","handleButtonClick","buttonName","eligible","newState","AdaBotHeadImage","ImageContainer","styled","errors","ValidateVoterPage","handleEmailChange","handleDropdownChange","adasTeamEvent","handleCheckboxChange","agreeToBeHonest","validateAndAddVoter","then","docData","exists","addVoter","error","NOT_ON_MAILING_LIST","onError","catch","fail","votersRef","preventDefault","ccid","match","renderHeaderText","renderEligibleVoterForm","isInvalid","test","Input","label","type","placeholder","Dropdown","multiple","selection","options","Checkbox","animated","hidden","Or","ineligibleSubmitted","redirectAfterSubmitTo","AdaBotStandingImage","CandidatesHeader","CandidateName","CandidateSpeech","h3","CandidatePreferences","li","CandidatePage","showCandidates","divided","preference","App","exact","component","Main","Valid","VotePart","FirebaseContext","React","createContext","Firebase","app","initializeApp","firebaseConfig","db","ReactDOM","render","Provider","document","getElementById"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,6C,oBCA3CD,EAAOC,QAAU,IAA0B,yC,oBCA3CD,EAAOC,QAAU,IAA0B,4C,kBCc3CD,EAAOC,QAdgB,CACrBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iB,2TCHXC,EAAoB,CACxBC,KAAM,IACNC,WAAY,cACZC,QAAS,WAuEIC,E,kDAnEb,aAAe,IAAD,8BACZ,gBAQFC,gBAAkB,SAACC,EAAD,GAAkB,IAAZC,EAAW,EAAXA,KACtB,EAAKC,SAAS,CACZC,WAAYF,EACZG,eAAgBV,EAAkBO,GAClCI,UAAU,KAXZ,EAAKC,MAAQ,CACXH,gBAAYI,EACZH,eAAgB,GAChBC,UAAU,GALA,E,0CAiBd,WAAU,IAAD,EAC0CG,KAAKF,MAA9CH,EADD,EACCA,WAAYE,EADb,EACaA,SAAUD,EADvB,EACuBA,eAE9B,OAAIC,GACFG,KAAKN,SAAS,CAAEG,UAAU,IACnB,kBAAC,IAAD,CAAUI,GAAIL,KAIrB,kBAACM,EAAA,EAAD,CAAMC,KAAK,UAAUC,WAAS,EAACC,UAAQ,GACrC,kBAACH,EAAA,EAAKI,KAAN,CAAWC,KAAK,uBAAuBC,OAAO,UAC5C,yBAAKC,IAAKC,IAAYC,IAAI,oBAG5B,kBAACT,EAAA,EAAKI,KAAN,CACEb,KAAK,OACLmB,OAAuB,SAAfjB,EACRkB,QAASb,KAAKT,iBAHhB,QAQA,kBAACW,EAAA,EAAKI,KAAN,CACEb,KAAK,aACLmB,OAAuB,eAAfjB,EACRkB,QAASb,KAAKT,iBAHhB,cAQA,kBAACW,EAAA,EAAKI,KAAN,CACEb,KAAK,UACLmB,OAAuB,YAAfjB,EACRkB,QAASb,KAAKT,iBAHhB,WAOA,kBAACW,EAAA,EAAKI,KAAN,CACEQ,SAAS,QACTP,KAAK,4CACLC,OAAO,UAGP,kBAACO,EAAA,EAAD,CAAMtB,KAAK,SAASU,KAAK,gB,GA7Dda,a,6FCXfC,IAAO,IAAIC,MAAOC,cAClBC,GAAS,UAAMH,GAAN,cAAgBA,GAAO,GAEhCI,GAAuB,CAC5B,CACCC,IAAK,wBACLC,KAAM,wBACNC,MAAO,yBAER,CACCF,IAAK,uBACLC,KAAM,uBACNC,MAAO,wBAER,CACCF,IAAK,mBACLC,KAAM,mBACNC,MAAO,oBAER,CACCF,IAAK,wBACLC,KAAM,wBACNC,MAAO,yBAER,CACCF,IAAK,iBACLC,KAAM,iBACNC,MAAO,kBAER,CACCF,IAAK,aACLC,KAAM,uCACNC,MAAO,cAER,CACCF,IAAK,gBACLC,KAAM,gBACNC,MAAO,iBAER,CACCF,IAAK,iBACLC,KAAM,iBACNC,MAAO,kBAER,CACCF,IAAK,eACLC,KAAM,eACNC,MAAO,gBAER,CACCF,IAAK,uBACLC,KAAM,uBACNC,MAAO,wBAER,CACCF,IAAK,+BACLC,KAAM,+BACNC,MAAO,iCAIHC,GAAe,CACpB,CACCC,UACC,+pBACDC,eACC,2QACDC,SACC,+QACDC,QACC,sgBACD,gBACC,yNACDC,eACC,+WACD,kBACC,wbACD,oBACC,yWACD,wBACC,4PACD,uBACC,2lBACD,qBACC,0NAIG1C,GAAa,CAClB,iBAAkB,CACjB2C,MAAO,sBACPtC,KAAM,iBACNuC,OACC,yhCACDC,SAAU,iCACVC,YAAa,CAAC,4BAA6B,qBAAsB,yBAElE,gBAAiB,CAChBzC,KAAM,gBACNsC,MAAO,oBACPC,OACC,uiDACDC,SAAU,gCACVC,YAAa,CAAC,4BAA6B,qBAAsB,yBAElE,eAAgB,CACfzC,KAAM,eACNsC,MAAO,oBACPC,OACC,opCACDC,SAAU,+BACVC,YAAa,CAAC,eAAgB,mBAAoB,+BAEnD,kBAAmB,CAClBzC,KAAM,kBACNsC,MAAO,sBACPC,OACC,ylGACDC,SAAU,iCACVC,YAAa,CAAC,mBAAoB,oBAAqB,yBAExD,gBAAiB,CAChBzC,KAAM,gBACNsC,MAAO,uBACPC,OACC,izCACDC,SAAU,oCACVC,YAAa,CAAC,oBAAqB,yBAEpC,gBAAiB,CAChBzC,KAAM,gBACNsC,MAAO,sBACPC,OACC,glDACDC,SAAU,6BACVC,YAAa,CAAC,mBAAoB,uBAEnC,gBAAiB,CAChBzC,KAAM,gBACNsC,MAAO,uBACPC,OACC,miBACDC,SAAU,+BACVC,YAAa,CAAC,iBAEf,WAAY,CACXzC,KAAM,WACNsC,MAAO,kBACPC,OACC,43BACDC,SAAU,4BACVC,YAAa,CAAC,sBAEf,cAAe,CACdzC,KAAM,cACNsC,MAAO,sBACPC,OACC,mzBACDC,SAAU,kCACVC,YAAa,CAAC,iBAEfC,QAAS,CACR1C,KAAM,UACNwC,SAAU,qBAMNG,GAAqB,GAErBC,GAAsB,GCnKtBC,GAAgBC,KAAMC,IAAT,sRAmBbC,GAAgBF,aAAMG,IAANH,CAAH,gJAObI,GAAgBJ,aAAMK,IAANL,CAAH,4LAGOM,MAMpBC,GAAgBP,aAAMQ,IAANR,CAAH,6DAgFJS,G,kDA7Db,aAAe,IAAD,8BACZ,gBAaFC,qBAAuB,WACrB,EAAKvD,SAAS,CAAEwD,sBAAsB,KAf1B,EAkBdC,oBAAsB,WAEpB,OADiC,EAAKrD,MAA9BoD,qBAEN,kBAACJ,GAAD,CACEM,UAAQ,EACRC,SAAS,MACTC,UAAW,EAAKL,qBAChBM,OAAO,8BACPC,QAAQ,wIAER,MA1BJ,EAAK1D,MAAQ,CACX2D,SAAS,EACTP,sBAAsB,GAJZ,E,qDAQd,WACMQ,aACF1D,KAAKN,SAAS,CAAEwD,sBAAsB,M,oBAqB1C,WACE,OACE,kBAACP,GAAD,CAAegB,cAAc,SAASC,QAAS,GAC7C,kBAAChB,EAAA,EAAKiB,OAAN,KACG7D,KAAKmD,sBACN,kBAACV,GAAD,KACE,kBAACqB,EAAA,EAAD,CAAOC,GAAG,IAAIC,MAAM,OAAO7D,KAAK,UAAU8D,QAAM,GAC7ChD,IAEH,kBAACqB,GAAD,KACE,wBAAI4B,UAAU,WAAd,oCACA,wBAAIA,UAAU,aAAd,oDAGA,wBAAIA,UAAU,QA5DH,2PA6DX,wBAAIA,UAAU,QAzDR,gSA0DN,wBAAIA,UAAU,QAnDJ,qHAqDZ,kBAAC,IAAD,CAAMjE,GAAG,aACP,kBAACkE,EAAA,EAAD,CAAQC,UAAU,EAAOC,OAAK,EAACL,MAAM,OAAO7D,KAAK,WAAjD,iB,GAnDSa,a,yDCxDjBsD,GAAe/B,aAAMgC,KAANhC,CAAH,4FAKZiC,GAAejC,KAAMkC,GAAT,mDAgBHC,GAZE,SAAC,GAAc,IAAZjF,EAAW,EAAXA,KAClB,OACE,kBAAC6E,GAAD,CACEK,KAAK,OACLC,QAAS,kBAACJ,GAAD,KAAe/E,GACxBqB,SAAS,YAERW,GAAa,GAAGhC,K,+BChBjBoF,GAAiBtC,KAAMkC,GAAT,4GAMdK,GAAYvC,KAAMwC,GAAT,8HAMTC,GAAkBzC,KAAMC,IAAT,uLAIOyC,MAoBbC,GAhBE,SAAC,GAAa,EAAXzF,KAClB,OACE,kBAACuF,GAAD,KACE,kBAACpC,EAAA,EAAD,CAAMuC,UAAQ,EAACvB,QAAS,GACtB,kBAAChB,EAAA,EAAKiB,OAAN,CAAauB,MAAO,IAClB,kBAACP,GAAD,qBACA,kBAACC,GAAD,uEAGA,kBAACO,GAAA,EAAD,CAAUzE,QAAM,EAACoD,MAAM,OAAOsB,QAAS,U,wCC7B3ChG,GAASiD,KAAMgD,GAAT,kDAINC,GAAuBjD,KAAMkD,GAAT,2EAKpBC,GAAcnD,aAAMoD,KAAKC,MAAXrD,CAAH,mDAIXsD,GAAetD,aAAMuD,KAANvD,CAAH,oFAmFHwD,G,kDA5Ed,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAOPC,aAAe,SAACzG,EAAD,GAAkB,EAAZgC,MAAa,IAAD,EACI,EAAKwE,OACzCE,EAFgC,EACxBA,UADwB,EACdC,gBATA,EAanBC,WAAa,SAAC5G,EAAD,GAAoB,IAAd6G,EAAa,EAAbA,OAAa,EACK,EAAKL,MAAjCE,EADuB,EACvBA,SAAUC,EADa,EACbA,cACZG,EAAQ,gBACZH,EAAgBE,GAElB,EAAK3G,SAAS,CACb6G,KAAMD,IAEPJ,EAASI,IArBS,EAwBnBE,oBAAsB,SAAC/G,GAEtB,OADsBL,GAAWK,IAzBf,EA6BnBgH,kBAAoB,SAACN,EAAeO,GACnC,OACC,kBAAChB,GAAD,CACCjG,KAAK,aACLkH,SAAU,EAAKV,aACfW,QAAST,IAAkBO,KAlCX,EAuCnBG,iBAAmB,WAClB,OAAO,kBAACC,GAAA,EAAD,CAAQC,KAAK,OAAOC,OAAQ,EAAKZ,WAAYa,UAAW,EAAG9G,KAAK,aAtCvE,EAAKL,MAAQ,CACZkE,MAAO,KACPuC,KAAM,IAJW,E,0CA2CnB,WAAU,IAAD,EACsDvG,KAAKgG,MAA3DG,EADA,EACAA,cAAeO,EADf,EACeA,cAAeQ,EAD9B,EAC8BA,QAASC,EADvC,EACuCA,WADvC,EAEcnH,KAAKwG,oBAA8BL,IACN,GAA3ClE,EAHA,EAGAA,SAAUC,EAHV,EAGUA,YACV8B,EAAUhE,KAAKF,MAAfkE,MACFoD,EAAgC,YAAlBjB,EAEpB,OACC,kBAACkB,GAAA,EAAD,CAAMrD,MAAOA,GACZ,kBAAC6B,GAAD,CAAcpF,IAAKwB,IACnB,kBAACoF,GAAA,EAAKC,QAAN,KACC,kBAACD,GAAA,EAAK/H,OAAN,CAAaiI,UAAU,UAAUpB,GAC/Be,EASE,KARH,kBAACG,GAAA,EAAKG,KAAN,KACC,kBAAC,GAAD,KACEJ,EAAc,iDAAmD,gBAEnE,kBAAC5B,GAAD,KACEtD,EAAcA,EAAYuF,KAAI,SAAC3G,EAAU4G,GAAX,OAAiB,wBAAIpG,IAAKoG,GAAI5G,MAAkB,QAKnF,kBAACuG,GAAA,EAAKC,QAAN,CAAcK,OAAK,EAACJ,UAAU,UACb,SAAfJ,EACEnH,KAAK6G,iBAAiBV,EAAeO,GACrC1G,KAAKyG,kBAAkBN,EAAeO,S,GAtEtB1F,a,oBCrBlB4G,I,MAAgB,yCAAG,+BAAAC,EAAA,sEACDC,KAASC,YAAYC,WAAW,iBAAiBC,MADhD,cAClBC,EADkB,OAGpB9I,EAAa,GACjB8I,EAASC,SAAQ,SAAUC,GAC1B,IAAMtH,EAAWsH,EAAIC,GACfC,EAAwBF,EAAIG,OAElCnJ,EAAU,6BAAQA,GAAR,mBAAqB0B,EAAWwH,OARnB,kBAWjBlJ,GAXiB,2CAAH,sDAchBoJ,GAAY,yCAAG,iCAAAX,EAAA,sEACKD,KADL,OAGpB,IAAWa,KAFLrJ,EADc,OAEdsJ,EAAqB,GACHtJ,EACnBuJ,OAAOC,KAAKxJ,EAAWqJ,IAAYI,QAAQH,EAAmBI,KAAKL,GAJpD,yBAMbC,GANa,2CAAH,qDASZK,GAAU,yCAAG,+BAAAlB,EAAA,sEACKC,KAASC,YAAYC,WAAW,WAAWC,MADhD,cACZC,EADY,OAGdc,EAAU,GACdd,EAASC,SAAQ,SAAUC,GAC1B,IAAMtH,EAAWsH,EAAIC,GACfY,EAAoBb,EAAIG,OAC9BS,EAAO,6BAAQA,GAAR,mBAAkBlI,EAAWmI,OAPnB,kBAUXD,GAVW,2CAAH,qDCgDDE,G,kDAnEb,WAAYlD,GAAQ,IAAD,8BACjB,cAAMA,IAWRmD,iBAZmB,wBAYA,6BAAAtB,EAAA,sEACQD,KADR,OACXxI,EADW,OAEjB,EAAKM,SAAS,CAAEN,eAFC,2CAZA,EAiBnB8G,SAAW,SAACzG,GAAU,IAAD,EACuB,EAAKuG,MAAvCoD,EADW,EACXA,WAAYtI,EADD,EACCA,SAAUoG,EADX,EACWA,QACxBf,EAAgBe,EAAUyB,OAAOC,KAAKnJ,GAAQA,EAC9C4J,EAAmBnC,EAAUyB,OAAOW,OAAO7J,GAAQ,KACzD,EAAKC,SAAS,CAAEgH,cAAejH,IAC/B2J,EAAW,CAAEtI,WAAUqF,gBAAekD,sBAtBrB,EAyBnBE,iBAAmB,SAACzI,GAAc,IAG5B0I,EAH2B,EACC,EAAKxD,MAA7BkB,EADuB,EACvBA,QAASC,EADc,EACdA,WADc,EAEO,EAAKrH,MAAnCV,EAFuB,EAEvBA,WAAYsH,EAFW,EAEXA,cAQpB,GANIQ,EACFsC,EAAiBnH,GACRjD,EAAW0B,KACpB0I,EAAiBpK,EAAW0B,IAG1B0I,EACF,OAAOb,OAAOC,KAAKY,GAChBC,OACAC,UACAjC,KAAI,SAACtB,GAAD,OACH,kBAAC,GAAD,CACErF,SAAUA,EACVQ,IAAK6E,EACLA,cAAeA,EACfO,cAAeA,EACfR,SAAU,EAAKA,SACfgB,QAASA,EACTC,WAAYA,QA7CpB,EAAKrH,MAAQ,CACXV,WAAY,GACZsH,cAAe,IAJA,E,qDAQnB,WACE1G,KAAKmJ,qB,oBA4CP,WAAU,IACArI,EAAad,KAAKgG,MAAlBlF,SACR,OACE,kBAAC6E,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKgE,MAAN,CAAYC,SAAO,EAACC,OAAO,SACzB,kBAACxC,GAAA,EAAKsC,MAAN,CAAYvJ,WAAS,EAAC0J,YAAa,GAChC9J,KAAKuJ,iBAAiBzI,U,GA5DNE,a,8BCKvB+I,GACE,QAIFC,GAAazH,KAAMkC,GAAT,kFAKVK,GAAYvC,KAAMwC,GAAT,qFAKTkF,GAAc1H,aAAM8C,KAAN9C,CAAH,8DAIX2H,GAAgB3H,aAAM4H,KAAN5H,CAAH,4DAIb6H,GAAe7H,aAAM4B,IAAN5B,CAAH,mFAqNH8H,G,kDA/Md,WAAYrE,GAAQ,IAAD,8BAClB,cAAMA,IAoBPsE,SArBmB,wBAqBR,iCAAAzC,EAAA,2DAGFX,EAAY,EAAKpH,MAAjBoH,SAHE,qBAIkB9E,GAJlB,sCAI6CoG,KAJ7C,0BAIJ+B,EAJI,KAKNC,EAAQ,GACZD,EAAUpC,SAAQ,SAAUsC,GAEvBD,EADJtD,EACS,6BACHsD,GADG,mBAELC,EAAe,CACfC,EAAG,KACHC,EAAG,KACHC,EAAG,QAGE,6BACHJ,GADG,mBAELC,EAAe,QAGpB,EAAK/K,SAAS,CAAE8K,QAAOD,cArBb,4CArBQ,EA6CnBpB,iBA7CmB,wBA6CA,6BAAAtB,EAAA,sEACOD,KADP,OACZxI,EADY,OAElB,EAAKM,SAAS,CAAEN,eAFE,2CA7CA,EAkDnBgK,WAAa,SAACyB,GAAU,IACf/J,EAA8C+J,EAA9C/J,SAAUqF,EAAoC0E,EAApC1E,cAAekD,EAAqBwB,EAArBxB,iBADX,EAEK,EAAKvJ,MAAxB0K,EAFc,EAEdA,MACFM,EAHgB,EAEP5D,QACS,gBAEpBpG,EAFoB,6BAGjB0J,EAAM1J,IAHW,mBAInBuI,EAAmBlD,KAJA,gBAQpBrF,EAAWqF,GAEf,EAAKzG,SAAS,CACb8K,MAAM,6BACFA,GACAM,MAlEa,EAuEnBC,gBAAkB,WAAO,IAAD,EACoB,EAAKjL,MAAxCyK,EADe,EACfA,UAAWrD,EADI,EACJA,QAASC,EADL,EACKA,WAG5B,GAF8BD,EAAU9E,GAAmByG,OAAS0B,EAAU1B,OAI7E,OADqB3B,EAAU9E,GAAqBmI,GAChC9C,KAAI,SAACgD,EAAc/C,GAAf,MAAqB,CAC5C,kBAAC,GAAD,CAAUpG,IAAKmJ,EAAchL,KAAMgL,IACnC,kBAAC,GAAD,CACCnJ,IAAK,gBAAkBmJ,EACvBrB,WAAY,EAAKA,WACjBtI,SAAU2J,EACVvD,QAASA,EACTC,WAAYA,IAEb,kBAAC+C,GAAD,CAAe5I,IAAK,uBAAyBoG,SAtF7B,EA2FnBsD,UAAY,WAAO,IACVR,EAAU,EAAK1K,MAAf0K,MAUJS,EAAY,EAKhB,OAJAtC,OAAOC,KAAK4B,GAAOrC,SAAQ,SAAUrH,GAChC0J,EAAM1J,KAAWmK,GAAa,MAG5BA,GAAa,GA3GF,EA8GnBC,aAAe,WAEd,IADkB,EAAKlF,MAAfmF,MAGP,OADAC,QAAQC,IAAI,iCACL,EAGR,EAAKC,UACL,EAAKC,kBACL,EAAK7L,SAAS,CAAEG,UAAU,KAvHR,EA0HnByL,QAAU,WAAO,IACRH,EAAU,EAAKnF,MAAfmF,MACFpJ,EAAQoJ,EAAK,MAEnBrD,KACE0D,WACAC,MACAC,MAAM,UACNC,aAAa,SACbC,QAAQ7J,GACR8J,KAAK,SAAS,SAAC3D,GAEf,GADuBA,EAAS4D,cACZ,KAEXtB,EAAU,EAAK1K,MAAf0K,MACFuB,EAAc,6BAAQZ,GAAR,IAAeX,UAC7BwB,EAAWrD,OAAOC,KAAKV,EAAS+D,OAAO,GAC7CnE,KACE0D,WACAC,IAAI,UAAYO,GAChBE,IAAIH,QA9IS,EAmJnBR,gBAnJmB,wBAmJD,mCAAA1D,EAAA,+DACU,EAAK/H,MAAxB0K,EADS,EACTA,MAAOtD,EADE,EACFA,QACTiF,EAAYrE,KAASC,UAAUqE,WAAWD,UAAU,GAFzC,SAIXxD,OAAOC,KAAK4B,GAAOrC,SAAQ,SAACrH,GACjC,IAAMqF,EAAgBqE,EAAM1J,GAC5B,GAAKqF,EAAL,CACA,IAAIkG,EAAY,GACVC,EAAiBpF,EAAU,iBAAmB,gBACpDmF,EAAU,GAAD,OAAIlG,EAAJ,gBAAkCgG,EAC3CrE,KAASC,YAAYC,WAAWsE,GAAgBlE,IAAItH,GAAUyL,OAAOF,OAVrD,2CAnJC,EAiKnBG,aAAe,WACd,OACC,kBAACC,GAAA,EAAD,CAAQC,MAAI,EAAC9L,QAAM,EAACP,UAAQ,GAC3B,kBAACsM,GAAA,EAAD,CAAQxM,KAAK,WAAb,aAlKF,EAAKL,MAAQ,CACZ0K,MAAO,GACPD,UAAW,GACXnL,WAAY,GACZS,UAAU,EACV+M,SAAS,EACT1F,SPuHa,EOtHbC,WAAY4C,IATK,E,qDAanB,WAAqB,IAAD,OACnB/J,KAAKsK,WACLtK,KAAKmJ,mBACL0D,YAAW,WACV,EAAKnN,SAAS,CAAEkN,SAAS,MACvB,O,oBAuJJ,WACC,IAAM5B,EAAYhL,KAAKgL,YADf,EAEsBhL,KAAKF,MAA3BD,EAFA,EAEAA,SAAU+M,EAFV,EAEUA,QAClB,OAAI/M,EACI,kBAAC,GAAD,MAIP,kBAAC+C,EAAA,EAAD,CAAMuC,UAAQ,GACb,kBAACvC,EAAA,EAAKiB,OAAN,CAAauB,MAAO,IACnB,kBAAC4E,GAAD,aACA,kBAAC,GAAD,6DACA,kBAAC,GAAD,iFAGA,kBAACC,GAAD,CAAajG,MAAM,OAAOsB,QAAS,KACnC,kBAAC6E,GAAA,EAAD,MACCyC,EACE5M,KAAKwM,eACL,CACAxM,KAAK+K,kBACL,kBAACX,GAAD,CACC/F,OAAK,EACL/C,IAAI,SACJnB,KAAK,UACLiE,UAAW4G,EACXhH,MAAM,OACNnD,QAASb,KAAKkL,cANf,iB,GA/LWlK,a,oBC/Bb8L,GAAgBvK,KAAMkC,GAAT,kFAKbK,GAAYvC,KAAMwC,GAAT,4EAKTgI,GAAuBxK,aAAMyK,KAANzK,CAAH,yFAKpB0K,GAAc,iFACwD7L,GADxD,KAGd8L,GAAe,2EACiD9L,GADjD,KA8JN+L,G,kDAvJb,aAAe,IAAD,8BACZ,gBAkBFC,eAnBc,wBAmBG,+BAAAvF,EAAA,6DACPwF,EAAkB,EAAKvN,MAAvBuN,cACR1E,OAAOC,KAAKyE,GAAe5F,KAAI,SAACgD,GAC9B,IAAMjB,EAAiB6D,EAAc5C,GAC/BxB,EAAoB,EAAKqE,qBAAqB9D,GAEpD,OADA,EAAK+D,UAAU9C,EAAcxB,GACtB,gBAAGwB,EAAexB,MANZ,SAQO,EAAKF,aARZ,cAQTC,EARS,yBASRA,GATQ,2CAnBH,EA+BduE,UA/Bc,yCA+BF,WAAOzM,EAAU0M,GAAjB,UAAA3F,EAAA,sEACJC,KACHC,YACAC,WAAW,WACXI,IAAItH,GACJoL,IAAI,CAAEsB,WALC,2CA/BE,0DAuCdzE,WAvCc,wBAuCD,+BAAAlB,EAAA,sEAEIkB,KAFJ,+DAKYjB,KAASC,YAAYC,WAAW,WAAWC,MALvD,cAKLC,EALK,OAOPc,EAAU,GACdd,EAASC,SAAQ,SAAUC,GACzB,IAAMtH,EAAWsH,EAAIC,GACfC,EAAwBF,EAAIG,OAElCS,EAAO,6BAAQA,GAAR,mBAAkBlI,EAAWwH,OAZ3B,kBAeJU,GAfI,4CAvCC,EAyDdsE,qBAAuB,SAAClO,GACtB,IAAIqO,EAAM,EACND,EAAS,GAWb,OAVA7E,OAAOW,OAAOlK,GAAY+I,SAAQ,SAACuF,GACjC,GAAIA,EAAa,WAAiBD,EAChCA,EAAMC,EAAa,WACnBF,EAAS,CAACE,QACL,GAAIA,EAAa,aAAmBD,EAAK,CAC9C,IAAME,EAAW,CAACD,GAClBF,EAAM,uBAAOA,GAAWG,OAIrBH,GAtEK,EAyEdI,UAAY,SAAC9M,EAAUkI,GACrB,OAAIA,EAAQlI,GAAU+H,OAAS,EACtB,qBAEFF,OAAOC,KAAKI,EAAQlI,KA7Ef,EAgFd+M,eAAiB,SAAC/M,EAAUkI,GAC1B,GAAIL,OAAOC,KAAKI,GAASH,OAAS,EAAG,CACnC,IAAMiF,EAAanF,OAAOC,KAAKI,EAAQlI,IACjCmB,EAAW+G,EAAQlI,GAAUgN,GAAlB,SAEjB,OAAO,kBAAChI,GAAA,EAAD,CAAOrF,IAAKwB,MArFT,EA0Fd8L,mBAAqB,WAAO,IAAD,EACI,EAAKjO,MAA1B8M,EADiB,EACjBA,QAAS5D,EADQ,EACRA,QAEjB,OACE,kBAAC3B,GAAA,EAAKsC,MAAN,CAAYG,YAAa,EAAG1J,WAAS,GAClCuI,OAAOC,KAAKI,GACVU,UACAjC,KAAI,SAAC3G,GAAD,OACH,kBAACuG,GAAA,EAAD,CAAM/F,IAAKR,GACR8L,EACC,kBAACG,GAAD,KACE,kBAACC,GAAA,EAAYlH,MAAb,CAAmBkI,QAAM,KAG3B,EAAKH,eAAe/M,EAAUkI,GAGhC,kBAAC3B,GAAA,EAAKC,QAAN,KACGsF,EACC,kBAACI,GAAA,EAAD,KACE,kBAACA,GAAA,EAAY1N,OAAb,KACE,kBAAC0N,GAAA,EAAYiB,KAAb,CAAkBpF,OAAO,eACzB,kBAACmE,GAAA,EAAYiB,KAAb,CAAkBpF,OAAO,YAE3B,kBAACmE,GAAA,EAAYkB,UAAb,KACE,kBAAClB,GAAA,EAAYiB,KAAb,CAAkBpF,OAAO,YAI7B,kBAAC,WAAD,KACE,kBAACxB,GAAA,EAAK/H,OAAN,KAAcwB,GACd,kBAACuG,GAAA,EAAKG,KAAN,KAAY,EAAKoG,UAAU9M,EAAUkI,YAvHrD,EAAKlJ,MAAQ,CACX8M,SAAS,EACTS,cAAe,GACfrE,QAAS,IALC,E,8FASd,iCAAAnB,EAAA,sEAE0BW,KAF1B,cAEQ+B,EAFR,gBAG8B3C,KAH9B,cAGQyF,EAHR,gBAKYrN,KAAK+I,aALjB,4DAMY/I,KAAKoN,iBANjB,4BAIQpE,EAJR,KAOEhJ,KAAKN,SAAS,CAAEL,QAASkL,EAAW8C,gBAAerE,YAPrD,iD,0EA0HA,WAAU,IACAA,EAAYhJ,KAAKF,MAAMkJ,QAAvBA,QAER,OACE,kBAAC,WAAD,KACE,kBAAC8D,GAAD,gBACa,IAAZ9D,EACC,kBAAC,GAAD,KAAYiE,IACV,6BACE,kBAAC,GAAD,KAAYC,IACZ,kBAAC/C,GAAA,EAAD,MACCnK,KAAK+N,2B,GA/IE/M,aClBhB2B,GAAgBJ,aAAMK,IAANL,CAAH,oEAKb4L,GAAoB,CACxBC,SAAU,QACVC,KAAM,QACNC,eAAgB,QAChBC,cAAe,aACfC,eAAgB,2BAChBC,cAAe,gBAGXC,GAAoB,CACxBN,SAAU,IACVC,KAAM,WACNC,eAAgB,MAChBC,cAAe,+BACfC,eACE,kMACFC,cAAe,iBAqFFE,G,kDAjFb,WAAY3I,GAAQ,IAAD,8BACjB,cAAMA,IAgCR4I,kBAAoB,WAClB,EAAKlP,SAAS,CAAEG,UAAU,KAhC1B,EAAKC,MAAQ,CACX8M,SAAS,EACT/M,UAAU,EACVuO,SAAU,iBACVE,eAAgB,KAChBC,cAAe,gBACfC,eAAgB,4CAChBK,WAAY,MATG,E,qDAanB,WAAqB,IAAD,OACVjC,EAAY5M,KAAKF,MAAjB8M,QACAkC,EAAa9O,KAAKgG,MAAlB8I,SACJlC,GACFC,YAAW,WACT,IAAIkC,EAEFA,EADED,EACM,gBAAQX,IAER,gBAAQO,IAGlB,EAAKhP,SAAL,cACEkN,SAAS,GACNmC,MAEJ,O,oBAQP,WAAU,IAAD,EASH/O,KAAKF,MAPPwO,EAFK,EAELA,eACAC,EAHK,EAGLA,cACAC,EAJK,EAILA,eACAC,EALK,EAKLA,cACA5O,EANK,EAMLA,SACAuO,EAPK,EAOLA,SACAxB,EARK,EAQLA,QARK,EAWqB5M,KAAKgG,MAAzB8I,EAXD,EAWCA,SAAU3D,EAXX,EAWWA,MAClB,OAAItL,EACKiP,EAAW,kBAAC,GAAD,CAAM3D,MAAOA,IAAY,kBAAC,GAAD,MAI3C,kBAAC,GAAD,CAAexH,cAAc,SAASwB,UAAQ,EAACvB,QAAS,GACtD,kBAAChB,EAAA,EAAKiB,OAAN,CAAauB,MAAO,GAClB,kBAACU,GAAA,EAAD,CAAO3F,KAAK,OAAOM,IAAKuO,IAAiBrO,IAAI,iBAC7C,kBAAC0E,GAAA,EAAD,CAAUrB,MAAM,OAAOsB,QAAS,KAChC,kBAACvC,EAAA,EAAD,CAAS5C,KAAK,UAAU6D,MAAOsK,EAAgBvH,MAAI,GACjD,kBAAChG,EAAA,EAAD,CAAMtB,KAAM2O,EAAUxB,QAASA,IAC/B,kBAAC7J,EAAA,EAAQuE,QAAT,KACE,kBAACvE,EAAA,EAAQzD,OAAT,KAAiBiP,GAChBC,KAGH5B,GACA,kBAACzI,EAAA,EAAD,CACEtD,QAASb,KAAK4O,kBACdvK,OAAK,EACLL,MAAM,OACN7D,KAAK,WAEJsO,S,GAzEezN,a,+BCpBxBiO,GAAiBC,aAAOpJ,KAAPoJ,CAAH,sFAMdvM,GAAgBuM,aAAOtM,IAAPsM,CAAH,4CAIbC,GACiB,wCAuMRC,G,kDAxLb,WAAYpJ,GAAQ,IAAD,8BACjB,cAAMA,IAaRqJ,kBAAoB,SAAC7P,EAAD,OAAMgC,EAAN,EAAMA,MAAN,OAAkB,EAAK9B,SAAS,CAAEqC,MAAOP,KAd1C,EAgBnB8N,qBAAuB,SAAC9P,EAAD,OAAMgC,EAAN,EAAMA,MAAN,OACrB,EAAK9B,SAAS,CAAE6P,cAAe/N,KAjBd,EAmBnBgO,qBAAuB,SAAChQ,EAAD,OAAMoH,EAAN,EAAMA,QAAN,OACrB,EAAKlH,SAAS,CAAE+P,gBAAiB7I,KApBhB,EAsBnB8I,oBAAsB,SAAAvE,GAAS,IAErBpJ,EAAUoJ,EAAVpJ,MACe+F,KACpBC,YACAC,WAAW,uBACXI,IAAIrG,GAGJkG,MACA0H,MAAK,SAAAC,GACAA,EAAQC,OAEV,EAAKC,SAAS3E,KA/CR,SAAA4E,GAAU,IAChBC,EAAwBb,GAChC,OAAQY,GACN,KAAKC,EACH5E,QAAQC,IAAI,SAAU2E,GACtB,MACF,QACE5E,QAAQC,IAAI,UA2CR4E,CAAQd,IACR,EAAKzP,SAAS,CAAEoP,UAAU,EAAOjP,UAAU,QAG9CqQ,OAAM,SAAAC,GACL/E,QAAQC,IAAI,6BA3CC,EAkDnByE,SAAW,SAAA3E,GAAS,IAEVpJ,EAAUoJ,EAAVpJ,MACFqO,EAAYtI,KAAS0D,WAAWC,IAAI,UAC1C3D,KACG0D,WACAC,MACAC,MAAM,UACNC,aAAa,SACbC,QAAQ7J,GACR8J,KAAK,SAAS,SAAA3D,GAEb,GADuBA,EAAS4D,cACZ,CAElB,IAAME,EAAWrD,OAAOC,KAAKV,EAAS+D,OAAO,GAC7CnE,KACG0D,WACAC,IAAI,UAAYO,GAChBE,IAAIf,QAEPiF,EAAUtH,KAAKqC,MApBH,IAyBVoE,EAAkBpE,EAAlBoE,cACFT,EACqB,IAAzBS,EAAc1G,QACO,iCAArB0G,EAAc,GAIhB,EAAK7P,SAAS,CAAEoP,WAAUjP,UAAU,EAAMsL,WAlFzB,EAqFnBD,aAAe,SAAA1L,GACbA,EAAE6Q,iBADgB,MAEgC,EAAKvQ,MAA/CiC,EAFU,EAEVA,MAAOwN,EAFG,EAEHA,cAAeE,EAFZ,EAEYA,gBACxBa,EAAOvO,EAAMwO,MAAM,SAAS,GAElC,GAAIxO,GAASuO,GAAQf,GAAiBE,EAAiB,CAErD,IAAMtE,EAAQ,CAAEmF,OAAMvO,QAAOwN,iBAC7B,EAAKG,oBAAoBvE,KA7FV,EAiGnBqF,iBAAmB,WACjB,OACE,kBAAC,KAAD,CAAQrQ,KAAK,QACX,kBAAC,KAAOmH,QAAR,iCACA,kBAAC,KAAOxC,UAAR,mQArGa,EA+GnB2L,wBAA0B,WAAO,IAAD,EACoB,EAAK3Q,MAA/CiC,EADsB,EACtBA,MAAOwN,EADe,EACfA,cAAeE,EADA,EACAA,gBACxBiB,GACH,mCAAmCC,KAAK5O,IAChB,IAAzBwN,EAAc1G,SACb4G,EAEH,OACE,kBAAC9J,GAAA,EAAD,CAAMxF,KAAK,OACT,kBAACwF,GAAA,EAAKiL,MAAN,CACEC,MAAM,QACNC,KAAK,OACLnK,SAAU,EAAK0I,kBACf0B,YAAY,qBAEd,kBAACpL,GAAA,EAAKqL,SAAN,CACEC,UAAQ,EACRC,WAAS,EACTL,MAAM,0DACNM,QAAS9P,GACT0P,YAAY,0CACZpK,SAAU,EAAK2I,uBAEjB,kBAAC3J,GAAA,EAAKyL,SAAN,CACEjR,KAAK,OACLwG,SAAU,EAAK6I,qBACfqB,MAAM,uIAER,kBAAC1M,EAAA,EAAOwF,MAAR,CAAcxJ,KAAK,SACjB,kBAAC,IAAD,CAAMF,GAAG,KACP,kBAACkE,EAAA,EAAD,CAAQkN,UAAQ,GACd,kBAAClN,EAAA,EAAOmD,QAAR,CAAgB7D,SAAO,GAAvB,QACA,kBAACU,EAAA,EAAOmD,QAAR,CAAgBgK,QAAM,GACpB,kBAACvQ,EAAA,EAAD,CAAMtB,KAAK,kBAIjB,kBAAC0E,EAAA,EAAOoN,GAAR,MACA,kBAACpN,EAAA,EAAD,CACEkN,UAAQ,EACRjN,SAAUsM,EACV1M,MAAM,OACN8M,KAAK,SACLjQ,QAAS,EAAKqK,cAEd,kBAAC/G,EAAA,EAAOmD,QAAR,CAAgB7D,SAAO,GAAvB,QACA,kBAACU,EAAA,EAAOmD,QAAR,CAAgBgK,QAAM,GACpB,kBAACvQ,EAAA,EAAD,CAAMtB,KAAK,qBA5JrB,EAAKK,MAAQ,CACXiC,MAAO,GACPwN,cAAe,GACfE,iBAAiB,EACjB5P,UAAU,EACViP,cAAU/O,EACVyR,qBAAqB,EACrBC,sBAAuB,GACvBtG,WAAOpL,GAVQ,E,0CAsKnB,WAAU,IAAD,EAC+BC,KAAKF,MAAnCD,EADD,EACCA,SAAUiP,EADX,EACWA,SAAU3D,EADrB,EACqBA,MAC5B,OAAItL,EACK,kBAAC,GAAD,CAAiBsL,MAAOA,EAAO2D,SAAUA,IAGhD,kBAAC,GAAD,CAAenL,cAAc,SAASwB,UAAQ,GAC5C,kBAAC8J,GAAD,CAAgBxO,IAAKiR,OACrB,kBAAC9O,EAAA,EAAKiB,OAAN,CAAauB,MAAO,GAClB,kBAACC,GAAA,EAAD,CAAUrB,MAAM,OAAOsB,QAAS,KAC/BtF,KAAKwQ,mBACLxQ,KAAKyQ,gC,GAlLgBzP,a,UCtC1B2Q,GAAmBpP,KAAMkC,GAAT,kFAKhBK,GAAYvC,KAAMwC,GAAT,4EAKT6M,GAAgBrP,KAAMkC,GAAT,mDAIboN,GAAkBtP,KAAMuP,GAAT,6EAKfC,GAAuBxP,KAAMyP,GAAT,6EAsDXC,GAjDO,WACpB,IAAMC,EAAiD9S,GAEvD,OACE,kBAAC,WAAD,KACE,kBAACuS,GAAD,mBACA,kBAAC,GAAD,mEAGA,kBAACxH,GAAA,EAAD,MACA,kBAAC7J,GAAA,EAAKqJ,MAAN,CAAYwI,SAAO,EAAC/R,UAAU,QAC3B8R,EACCvJ,OAAOC,KAAKsJ,GACTzI,OACAhC,KAAI,SAACiG,GAAD,MACgC,YAAnCtO,GAAWsO,GAAejO,KAAqB,KAC7C,kBAACa,GAAA,EAAD,CAAMgB,IAAKoM,GACT,kBAACpN,GAAA,EAAKwF,MAAN,CACEX,UAAQ,EACRhF,KAAK,SACLM,IAAKyR,EAAexE,GAAezL,WAErC,kBAAC3B,GAAA,EAAKgH,QAAN,CAAc3D,cAAc,OAC1B,kBAACiO,GAAD,KACGxS,GAAWsO,GAAejO,MAE7B,kBAACoS,GAAD,KACGzS,GAAWsO,GAAe1L,QAE7B,4BACG5C,GAAWsO,GAAexL,YAAYuF,KAAI,SAAC2K,GAAD,OACzC,kBAACL,GAAD,CAAsBzQ,IAAK8Q,GACxBA,QAKT,kBAACjI,GAAA,EAAD,UAKR,kBAAC,GAAD,wBC9CKkI,OAff,WACE,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACjE,KAAK,IAAIkE,UAAWC,KACjC,kBAAC,IAAD,CAAOF,OAAK,EAACjE,KAAK,YAAYkE,UAAWE,KACzC,kBAAC,IAAD,CAAOH,OAAK,EAACjE,KAAK,QAAQkE,UAAWG,KACrC,kBAAC,IAAD,CAAOJ,OAAK,EAACjE,KAAK,WAAWkE,UAAWpF,KACxC,kBAAC,IAAD,CAAOmF,OAAK,EAACjE,KAAK,cAAckE,UAAWN,QCfpCU,GAFSC,IAAMC,cAAc,M,mBCC7BC,GCEb,aAAe,oBACbC,KAAIC,cAAcC,IAClBjT,KAAKkT,GAAKH,KAAIvH,Y,OCClB2H,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,GAAgBC,SAAjB,CAA0B7R,MAAO,IAAIsR,IACnC,kBAAC,GAAD,QAGJQ,SAASC,eAAe,U,mBCd1B/U,EAAOC,QAAU,IAA0B,yC","file":"static/js/main.f2fc35a5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AdaBotFromRight.e2b8ff96.png\";","module.exports = __webpack_public_path__ + \"static/media/AdaBotSleep.872f17d3.png\";","module.exports = __webpack_public_path__ + \"static/media/AdaBotStanding.812879e6.png\";","const firebaseConfig = {\n  apiKey: \"AIzaSyATCLnWTkGsmqS1dyC5vdCWfdpk55qnvjw\",\n  authDomain: \"election-6f2a7.firebaseapp.com\",\n  databaseURL: \"https://election-6f2a7.firebaseio.com\",\n  projectId: \"election-6f2a7\",\n  storageBucket: \"election-6f2a7.appspot.com\",\n  messagingSenderId: \"751584572617\",\n  appId: \"1:751584572617:web:d7ad368cacee6d24b4c918\",\n  measurementId: \"G-Q4G2KRTW5F\"\n};\n\n/* Sorry for CommonJS import LOL. \nIt wasn't working when I tried to \nconvert to ES so I stopped for now. */\nmodule.exports = firebaseConfig;\n","import React, { Component } from \"react\";\nimport { Menu, Icon } from \"semantic-ui-react\";\nimport { Redirect } from \"react-router-dom\";\nimport AdaBotHead from \"../assets/AdaBotHead.png\";\n\nconst ACTIVE_ITEM_PATHS = {\n  home: \"/\",\n  candidates: \"/candidates\",\n  results: \"results\"\n};\n\nclass Header extends Component {\n  constructor() {\n    super();\n    this.state = {\n      activeItem: undefined,\n      activeItemPath: \"\",\n      redirect: false\n    };\n  }\n\n  handleItemClick = (e, { name }) => {\n    this.setState({\n      activeItem: name,\n      activeItemPath: ACTIVE_ITEM_PATHS[name],\n      redirect: true\n    });\n  };\n\n  render() {\n    const { activeItem, redirect, activeItemPath } = this.state;\n\n    if (redirect) {\n      this.setState({ redirect: false });\n      return <Redirect to={activeItemPath} />;\n    }\n\n    return (\n      <Menu size=\"massive\" stackable inverted>\n        <Menu.Item href=\"https://adasteam.ca/\" target=\"_blank\">\n          <img src={AdaBotHead} alt=\"Ada's Bot Head\" />\n        </Menu.Item>\n\n        <Menu.Item\n          name=\"home\"\n          active={activeItem === \"home\"}\n          onClick={this.handleItemClick}\n        >\n          Home\n        </Menu.Item>\n\n        <Menu.Item\n          name=\"candidates\"\n          active={activeItem === \"candidates\"}\n          onClick={this.handleItemClick}\n        >\n          Candidates\n        </Menu.Item>\n\n        <Menu.Item\n          name=\"results\"\n          active={activeItem === \"results\"}\n          onClick={this.handleItemClick}\n        >\n          Results\n        </Menu.Item>\n        <Menu.Item\n          position=\"right\"\n          href=\"https://github.com/adas-team/ElectionsApp\"\n          target=\"_blank\"\n        >\n          {/* <img src={AdaBotHead} alt=\"Ada's Bot Head\" /> */}\n          <Icon name=\"github\" size=\"large\" />\n        </Menu.Item>\n      </Menu>\n    );\n  }\n}\n\nexport default Header;\n","const year = new Date().getFullYear();\nconst yearRange = `${year} - ${year + 1}`;\n\nconst adasTeamEventOptions = [\n\t{\n\t\tkey: \"Crash Course/Workshop\",\n\t\ttext: \"Crash Course/Workshop\",\n\t\tvalue: \"Crash Course/Workshop\",\n\t},\n\t{\n\t\tkey: \"Ada's Base (Discord)\",\n\t\ttext: \"Ada's Base (Discord)\",\n\t\tvalue: \"Ada's Base (Discord)\",\n\t},\n\t{\n\t\tkey: \"Ada's Developers\",\n\t\ttext: \"Ada's Developers\",\n\t\tvalue: \"Ada's Developers\",\n\t},\n\t{\n\t\tkey: \"Tutoring/Office Hours\",\n\t\ttext: \"Tutoring/Office Hours\",\n\t\tvalue: \"Tutoring/Office Hours\",\n\t},\n\t{\n\t\tkey: \"Coffee && Code\",\n\t\ttext: \"Coffee && Code\",\n\t\tvalue: \"Coffee && Code\",\n\t},\n\t{\n\t\tkey: \"Conference\",\n\t\ttext: \"Conference (such as GHC or CAN-CWiC)\",\n\t\tvalue: \"Conference\",\n\t},\n\t{\n\t\tkey: \"Ada's Mentors\",\n\t\ttext: \"Ada's Mentors\",\n\t\tvalue: \"Ada's Mentors\",\n\t},\n\t{\n\t\tkey: \"Ada's Students\",\n\t\ttext: \"Ada's Students\",\n\t\tvalue: \"Ada's Students\",\n\t},\n\t{\n\t\tkey: \"Ada's Tutors\",\n\t\ttext: \"Ada's Tutors\",\n\t\tvalue: \"Ada's Tutors\",\n\t},\n\t{\n\t\tkey: \"High School Outreach\",\n\t\ttext: \"High School Outreach\",\n\t\tvalue: \"High School Outreach\",\n\t},\n\t{\n\t\tkey: \"None, but I look forward to!\",\n\t\ttext: \"None, but I look forward to!\",\n\t\tvalue: \"None, but I look forward to!\",\n\t},\n];\n\nconst positionDesc = [\n\t{\n\t\tPresident:\n\t\t\t\"Responsibilities include: Act as Chair of the Executive Committee, set a strategic direction for the Group, possess signing authority on the group bank account, act as part of the Election Committee, be responsible for arranging meeting agendas, ensure executives are not falling behind in their duties and help out when necessary, take mandatory annual President's training through Student Group Services (SGS),  re-register the Group through Student Group Services (SGS), and complete Risk Management through Student Group Services (SGS). Nominee must have held an Executive Position in the previous Academic Year (2019-20) OR be approved by the Executive Committee.\",\n\t\tAdministration:\n\t\t\t\"They would be responsible for organizing and planning meetings, recording meeting minutes, maintaining internal communications within the Executive Committee, hosting executive meetings in the absence of the President, and acting as part of the Election Committee.\",\n\t\tAcademic:\n\t\t\t\"They would be responsible for scheduling Ada's Base office hours and tutoring services, collecting information regarding student struggles and concerns, and advocating for changes on behalf of students to the department to help improve students' academic experiences. \",\n\t\tFinance:\n\t\t\t\"They would be responsible for writing cheques to reimburse members for authorized purchases, setting a budget that is approved by members of the Executive Committee, tracking all incoming and outgoing cash flow for an annual budget report and audit purposes, presenting retrospective budget for the previous fiscal year at the Annual General Meeting, and finding and applying for grants used by the student group for operations. Must take Mandatory Annual Treasurer's training through Student Group Services (SGS). \",\n\t\t\"Digital-Media\":\n\t\t\t\"They would be responsible for maintaining the website, blog, social media, and Ada's Base whiteboard/bulletin board. They would also collaborate with VP Communications in making posters and advertising for events. \",\n\t\tCommunications:\n\t\t\t\"They would be responsible for tracking membership (i.e. tracking active members that are on the mailing list and have attended an event in the current Academic Year), sending out and crafting weekly/monthly emails about opportunities to members, collaborating with VP Digital Media in making posters and advertising for events, and reading and replying to emails. \",\n\t\t\"Campus-Outreach\":\n\t\t\t\"They would be responsible for acting as a liaison between Ada's Team and other student groups on campus with similar goals or missions, leading contact for Student Group Services (SGS) and BearsDen, being the main point of contact for internal university events such as Science Orientation, Clubs Fair, and WISEST CHOICES conferences, and working with VP Industry Outreach to organize and plan events with the rest of the Outreach Team. \",\n\t\t\"Industry-Outreach\":\n\t\t\t\"They would be responsible for liaising with companies and industry partners to organize events at the University of Alberta, helping with organizing events on campus to enrich members' university experiences and to foster a strong sense of belonging within the community, and working with VP Campus Outreach to plan events with the rest of the Outreach Team.\",\n\t\t\"Conference-Operations\":\n\t\t\t\"They would be responsible for booking accommodations and planning transportation at conferences in foreign cities, coordinating flights to and from the event, and handling other logistics in the conference city. Must be available from May to August.\",\n\t\t\"Conference-Relations\":\n\t\t\t\"They would be responsible for determining what the Department would like to see from Ada's Team, collaborating with the Chair of the Department and any Faculty Advisors regarding the best way to put forth efforts, bringing any promotional materials from the University of Alberta to the conference to put in swag bags (e.g. postcards, pens, etc.), hosting University of Alberta events at the conference (e.g. panels, tech talks, research posters, etc.), and being the first point of contact for Faculty who want to send student representatives to the conference. Must be available from May to August.\",\n\t\t\"Conference-Finance\":\n\t\t\t\"They would be responsible for applying for grants, talking to professors regarding fundraising for conferences, and handling reimbursements for students attending conferences. Must be available from May to August.\",\n\t},\n];\n\nconst candidates = {\n\t\"Shahzaib Ahmed\": {\n\t\temail: \"sahmed1@ualberta.ca\",\n\t\tname: \"Shahzaib Ahmed\",\n\t\tspeech:\n\t\t\t\"Hi Folks,\\n Hope you're all doing well. I'm Shahzaib Ahmed, a mechanical engineering student and long-time badminton enthusiast. I'm here today to chat about Ada's team and how I recon I can contribute towards the group's various initiatives. As an executive at the University of Alberta Aerial Robotics Group, as well as an experienced volunteer with a number of clubs across campus, I've had the good fortune of serving in a pretty diverse array of roles and responsibilities. From leading technical and operations aspects of projects, to promoting diversity and personal development within teams, to handling the fun parts of outreach work that involve liaising with student groups and industry partners to bring successful community initiatives to life, I've always enjoyed the people-centric nature of student groups. Ada's teams' focus on initiatives that not only promote diversity within the STEM sphere, but also member development on a more individual level is something that I believe I'd be able to enthusiastically contribute towards\",\n\t\tphotoSrc: \"/candidatePhotos/shahzaib.jpeg\",\n\t\tpreferences: [\"VP Conference - Relations\", \"VP Campus Outreach\", \"VP Industry Outreach\"],\n\t},\n\t\"Bhavnoor Kaur\": {\n\t\tname: \"Bhavnoor Kaur\",\n\t\temail: \"bkaur@ualberta.ca\",\n\t\tspeech:\n\t\t\t\"Hello everyone,\\nMy name is Bhavnoor Kaur and I am going into my fifth year of software engineering degree. I am excited to have the opportunity to speak with you all today. I have always been passionate about technology and the potential it carries. This is why I am pursuing my current degree. Through various leadership roles, I have acquired a diverse set of skills and experiences which combined with my passion for technology and computing would make me a good fit for the position of VP Conferences – Relations. I am confident that I can help promote and support Ada’s Team functionality through my dedication and diverse set of skills.\\nI understand the importance of diversity and the impact Ada’s Team is making. I would love to be a part of such an amazing team and be able to support and represent many students in the STEM fields. Conferences, in my opinion have the potential to make a huge impact in student’s life. I have learnt a lot through my experiences with GHC Conference, which I got to attend through Ada’s Team. I strongly believe that through solid representation of University of Alberta students at various conferences, we can provide more and more opportunities for students to get more involved in the industry. This will enable the students to learn and expand their horizons.\\nIn this position, I am hoping to build strong connections with the Department and Chair and set forth the best way to put forth efforts that benefit the students at large through conferences and various events like panels, tech talks etc.\",\n\t\tphotoSrc: \"/candidatePhotos/bhavnoor.jpg\",\n\t\tpreferences: [\"VP Conference - Relations\", \"VP Campus Outreach\", \"VP Industry Outreach\"],\n\t},\n\t\"Frances Igwe\": {\n\t\tname: \"Frances Igwe\",\n\t\temail: \"figwe@ualberta.ca\",\n\t\tspeech:\n\t\t\t\"Hello everyone, my name is Frances Igwe and I am running for three positions, VP Academics, VP Digital Media, VP conference(operations). As a third-year computer science student, I am passionate about technology, always eager to learn more and share my knowledge with others. if elected for VP Academics, I will bring my love for learning. I will ensure everyone has access to resources that would help them succeed academically. whenever we advocate/protest for change to improve our academic conditions, our voices will definitely be heard. I believe my tech savvy skills and imagination makes me a perfect candidate for VP digital media. Vote for me, and I will take our online presence to the next level. I am talking 100% engagement and membership increase. Finally, vote for me as VP Operations and you won't have to worry about a thing. All logistics and bookings are under control. My experience managing sponsorships for other student organizations means that members get to fly first class and stay in five-star hotels. I am all about diversity and inclusivity. I will be bringing a fresh perspective to Ada's Team. So, don't forget to vote for me! Thank you.\",\n\t\tphotoSrc: \"/candidatePhotos/frances.jpg\",\n\t\tpreferences: [\"VP Academics\", \"VP Digital Media\", \"VP Conference - Operations\"],\n\t},\n\t\"MacKenzie Luong\": {\n\t\tname: \"MacKenzie Luong\",\n\t\temail: \"macken3@ualberta.ca\",\n\t\tspeech:\n\t\t\t\"Hi all! I'm MacKenzie and I am currently a first year student specializing in computing science and am currently the VP Industry Outreach for Ada's Team. For the upcoming school year, I will be running for VP Digital Media, VP Communications, and VP Industry outreach!\\nDuring my year as VP Industry Outreach, I planned and led the Coffee&&Codes in this Winter Semester, which both were In-person and had many goodies, like the samosas at the Coffee&&Code with Workday! Whilst preparing for these events, I worked with our current VP Digital Media to promote these events! From my experience of preparing, promoting and leading these industry events, I’ve gotten a general sense of what platforms are the most active! Given my previous experience on Ada’s team, I have an understanding of the structure and quality that you all expect from us!\\nThere's my experience as VP Industry Outreach on Ada’s Team, so why am I running again? It’s a very basic and cheesy answer: I genuinely enjoy it. Bear with me, because I’m going to talk about my experience in a communications role in high school, but remember that I am a first year and that wasn’t even a year away! Last year I was the Internal Communications Officer for my high school's SU, which is really just a label since all the roles were flexible. During that period I had to juggle taking meeting notes, making and posting social media posts, and even learnt basics in sound tech to mix live audio. So in short, I really like learning and trying new things, led communication within the council and communicated to the student population through creating social media posts, posting them, and was in charge of surveys that allowed students to relay their concerns and wants to the team. But the most important thing: I genuinely enjoyed doing that all and I would love to do that for Ada's Team! I had a great time with Ada’s team this year, and I do hope I can continue it next year in a position like VP Digital Media that would reignite that passion! (shorten and cut out if too long)\\nFor what I would like to do as Ada’s Team VP Digital Media, I would definitely continue how our current posts are. Nice and concise with different posts/sizes to fit specific social media. I would also like to test out new promotional media, such as short animations to add some spice to promotions, or even videos summarizing larger events like conferences! I would love to also communicate with the future VP communications to have media sent out that suits your way of getting information!\\nIf I am elected VP Communications next year, I’ll aim to continue to promote our events like we did this year through social media and newsletters, or however way that you all receive event information! I would love to not only send information about events and initiatives to you all, but also for you to tell me anything you’d like! Event suggestions, different ways to promote, etc. I’ll be sure to relay your requests to the exec team!\\nAnd if I am elected as Ada’s Team VP Industry Outreach, I’ll hope to lead more events that tailor to your wants!\",\n\t\tphotoSrc: \"/candidatePhotos/mackenzie.jpg\",\n\t\tpreferences: [\"VP Digital Media\", \"VP Communications\", \"VP Industry Outreach\"],\n\t},\n\t\"Khushi Mittal\": {\n\t\tname: \"Khushi Mittal\",\n\t\temail: \"kmittal2@ualberta.ca\",\n\t\tspeech:\n\t\t\t\"Hi everyone, I am Khushi Mittal, a first-year Computing Science student at the University of Alberta. I am standing as the VP Administration and VP Industry Outreach.I have been involving myself with clubs like Ada's team who go out of their way to provide extracurricular opportunities to students. I’d be lying though if I said that my sole motive behind joining Ada’s team is to help others and change the world. My reason is fairly selfish because I strongly believe in the inability to change the world before changing myself. If you all give me the opportunity, I assure to always give you the best version of myself and constantly focus on growth and improvement. I love meeting new people, going on unnecessarily long walks and simping for cool new technology. Every time I come across someone great, I carry a part of them in me, making myself an amalgamation of all the people I've met in my journey so far. I would like to conclude with a short excerpt from Steve Job's Stanford address that helps me wake up every morning. I hope it helps you during the final season. \\\"Work will take a huge part of your life. The only way to be fully satisfied is to do what you believe is great work. And the only way to do great work is to do what you love. If you haven't found it yet, keep looking. Do not settle.\\\"\",\n\t\tphotoSrc: \"/candidatePhotos/khushiMittal.jpg\",\n\t\tpreferences: [\"VP Administration\", \"VP Industry Outreach\"],\n\t},\n\t\"Grace Mullane\": {\n\t\tname: \"Grace Mullane\",\n\t\temail: \"mullane@ualberta.ca\",\n\t\tspeech:\n\t\t\t\"Hi everyone! Thank you for coming here today to help promote student life and build diversity in steam by engaging with Ada’s Team. A little bit about me and my involvement with Ada’s Team- firstly, this group is a great touch point for students to get help in their classes and that is actually how I got started. Let’s rewind back to 2020- I was a freshman attending a couple sessions for Ada’s Team tutoring in my intro cmput course. I enjoyed that it was by students for students. Then after that, I became the Ada’s Team VP communications for the 2021-2022 year. I created the newsletters by gathering opportunities from other useful resources and from our own contacts and relaying those to our members. Some other things that I loved doing during that time was curating a podcast with an UAlberta and Ada’s Team alumni about her experience as a student to Google, and engaging with potential prospective students at the UofA. I had a wonderful time being apart of Ada’s Team. Now here we are, I am going into my fourth year and (hopefully) final year. I have had internship experience and I have another internship for this summer - so I am familiar the process of interviews, resumes, and do have some advice to share with students who are looking for it. In all, I really want to give back what this club has given me and hopefully set up more opportunities for students because I was in there shoes once. It would be the such a treat if you voted for me for this upcoming year. I am running for VP Digital Media and VP Campus Outreach and would enjoy doing either role\",\n\t\tphotoSrc: \"/candidatePhotos/grace.png\",\n\t\tpreferences: [\"VP Digital Media\", \"VP Campus Outreach\"],\n\t},\n\t\"Pratham Arora\": {\n\t\tname: \"Pratham Arora\",\n\t\temail: \"pratham2@ualberta.ca\",\n\t\tspeech:\n\t\t\t\"Heyy!! My name is Pratham . I am currently a Ada's base mentor and tutor. I love helping out students with their academics and with any questions they have and that's why I would love to be in this role of the VP academics in Ada's team . I have been part of the Ada's team for over 2 years now and I believe the experience I have gotten from those years is something I would use If I am elected for this position .\\nSo please do vote for me and I would bring in more volunteering tutors and more events where we all could learn and grow more .\",\n\t\tphotoSrc: \"/candidatePhotos/pratham.jpg\",\n\t\tpreferences: [\"VP Academics\"],\n\t},\n\t\"Saba Gul\": {\n\t\tname: \"Saba Gul\",\n\t\temail: \"gul@ualberta.ca\",\n\t\tspeech:\n\t\t\t\"Hi everyone! I'm Saba, I'm in my fourth year of CS Spec with a minor in business. I've been apart of Ada's team for the past 2 years, I started out in Conferences and was the VP Admin for this year. \\\\nWhat I really enjoy about Ada's as a whole is the support and the opportunities it offers members through conferences and industry events. Regarding my specific role as VP Admin, I greatly enjoyed the flexibility the role provides, it allows me to participate in events that interest me and I can wear many hats in this role. For example, this year I got to host a couple of coffee&&code events. As well, I ensure clear communication within the team. I feel I have grown in this role and am a good fit. For these reasons I am running for VP Admin once again and would love to come back next year to fulfill my plans of contributing to ProtoJam and supporting my fellow executive members.\",\n\t\tphotoSrc: \"/candidatePhotos/saba.jpg\",\n\t\tpreferences: [\"VP Administration\"],\n\t},\n\t\"Khushi Shah\": {\n\t\tname: \"Khushi Shah\",\n\t\temail: \"khushi3@ualberta.ca\",\n\t\tspeech:\n\t\t\t\"Hello! My name is Khushi. I am in my third-year of CS. I am currently VP Academics for the current 2022/2023 academic year. This year by far has been great and I enjoyed so much being apart of this warm and welcoming team. I loved being apart of this team where everyone is so passionate about organizing workshops such as, hosting Coffee and Code, and helping expand diversity in the STEAM field. My main role was to help organize the tutoring program we offer here at Ada's team and I couldn't be more happy and willing to do it again for the next upcoming year. I also was able to successfully learn more about how the other roles and help around with whatever I could. Finally, I would like to thank everyone on the team for being so friendly, and I would love to continue with Ada's team initiatives! Thank you.\",\n\t\tphotoSrc: \"/candidatePhotos/khushiShah.jpg\",\n\t\tpreferences: [\"VP Academics\"],\n\t},\n\tAbstain: {\n\t\tname: \"Abstain\",\n\t\tphotoSrc: \"/AdaBotSleep.png\",\n\t},\n};\n\nconst REELECT = false;\n\nconst reelectedPositions = [];\n\nconst reelectedCandidates = {};\n\nexport {\n\tadasTeamEventOptions,\n\tpositionDesc,\n\tcandidates,\n\tREELECT,\n\treelectedCandidates,\n\treelectedPositions,\n\tyear,\n\tyearRange,\n};\n","import { Grid, Label, Segment, Button, Message } from \"semantic-ui-react\";\nimport AdaBotFromRight from \"../../assets/AdaBotFromRight.png\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport style from \"styled-components\";\nimport { isMobile } from \"react-device-detect\";\nimport { year } from \"../constants\";\n\nconst TextContainer = style.div`\n  text-align: center; \n  padding: 80px !important;\n  margin-top: -90px !important;\n  padding-bottom: 50px !important;\n\n  .welcome {\n    font-size: 60px;\n  }\n\n  .subheader {\n    font-size: 36px;\n  }\n\n  .info {\n    font-size: 20px;\n  }\n`;\n\nconst StyledSegment = style(Segment)`\n  float: right;  \n  width: 70% !important; \n  margin-bottom: 100px !important;\n  margin-right: 60px !important;\n`;\n\nconst GridContainer = style(Grid)`\n  height: 100%;\n  width: 100%;\n  background-image: url(${AdaBotFromRight});\n  background-position: left bottom;\n  background-repeat: no-repeat;\n  background-size: 30%;  \n`;\n\nconst MobileMessage = style(Message)`\n  margin-left: 20px !important;\n`;\n\nconst covidAcknowledgment = `During this pandemic, we hope you and your loved ones \nare all safe, healthy, and you are taking great care of yourself mentally \nand physically. We thank you for taking the time to help us run as smoothly as possible during this sensitive time.`;\n\nconst beforeYouBegin = `Before you begin, the University of Alberta \nacknowledges that we are located on Treaty 6 territory, and respects \nthe histories, languages, and cultures of First Nations, Metis, Inuit, \nand all First Peoples of Canada, whose presence continues to enrich \nour vibrant community.\n`;\n\nconst checkOutCandidates = `If you haven't already, please refer to the\nCandidates tab to see all who are running before making a decision.`;\n\nclass HomePage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      visible: true,\n      mobileMessageVisible: false\n    };\n  }\n\n  componentDidMount() {\n    if (isMobile) {\n      this.setState({ mobileMessageVisible: true });\n    }\n  }\n\n  handleMessageDismiss = () => {\n    this.setState({ mobileMessageVisible: false });\n  };\n\n  renderMobileMessage = () => {\n    const { mobileMessageVisible } = this.state;\n    return mobileMessageVisible ? (\n      <MobileMessage\n        negative\n        attached=\"top\"\n        onDismiss={this.handleMessageDismiss}\n        header=\"Are you on a mobile device?\"\n        content=\"This voting app was designed to be used on a computer, not your mobile. Please switch to your computer now for the best experience.\"\n      />\n    ) : null;\n  };\n\n  render() {\n    return (\n      <GridContainer verticalAlign=\"middle\" columns={1}>\n        <Grid.Column>\n          {this.renderMobileMessage()}\n          <StyledSegment>\n            <Label as=\"a\" color=\"blue\" size=\"massive\" ribbon>\n              {year}\n            </Label>\n            <TextContainer>\n              <h1 className=\"welcome\">Welcome to Ada's Team Elections!</h1>\n              <h2 className=\"subheader\">\n                We appreciate you all coming out to participate!\n              </h2>\n              <h3 className=\"info\">{covidAcknowledgment}</h3>\n              <h3 className=\"info\">{beforeYouBegin}</h3>\n              <h3 className=\"info\">{checkOutCandidates}</h3>\n            </TextContainer>\n            <Link to=\"/validate\">\n              <Button disabled={false} fluid color=\"blue\" size=\"massive\">\n                Start\n              </Button>\n            </Link>\n          </StyledSegment>\n        </Grid.Column>\n      </GridContainer>\n    );\n  }\n}\n\nexport default HomePage;\n","import React from \"react\";\nimport { positionDesc } from \"../constants\";\nimport { Popup } from \"semantic-ui-react\";\nimport style from \"styled-components\";\n\nconst PopupMessage = style(Popup)`\n  font-size: 16px !important;\n  max-width: 62.5% !important; \n`;\n\nconst PositionName = style.h1`\n  width: fit-content;\n`;\n\nconst Position = ({ name }) => {\n  return (\n    <PopupMessage\n      wide=\"very\"\n      trigger={<PositionName>{name}</PositionName>}\n      position=\"top left\"\n    >\n      {positionDesc[0][name]}\n    </PopupMessage>\n  );\n};\n\nexport default Position;\n","import React from \"react\";\nimport { Grid, Progress } from \"semantic-ui-react\";\nimport style from \"styled-components\";\nimport AdaBotSleepImage from \"../../assets/AdaBotSleep.png\";\n\nconst VoteDoneHeader = style.h1`\n    padding-top: 1.8rem;\n  font-size: 80px !important;\n  text-align: center;\n`;\n\nconst Subheader = style.h2`\n    text-align: center;\n    margin-top: 0.5rem !important;\n    margin-bottom: 2rem !important;\n`;\n\nconst ImageBackground = style.div`\n    height: 90%; \n    background-size: 35%; \n    background-repeat: no-repeat;\n    background-image: url(${AdaBotSleepImage});\n    background-position: center bottom;\n`;\n\nconst VoteDone = ({ name }) => {\n  return (\n    <ImageBackground>\n      <Grid centered columns={1}>\n        <Grid.Column width={10}>\n          <VoteDoneHeader>You're Done!</VoteDoneHeader>\n          <Subheader>\n            Thanks for voting. We'll let you know when the results are in.\n          </Subheader>\n          <Progress active color=\"blue\" percent={100}></Progress>\n        </Grid.Column>\n      </Grid>\n    </ImageBackground>\n  );\n};\n\nexport default VoteDone;\n","import React, { Component } from \"react\";\nimport style from \"styled-components\";\nimport { candidates } from \"../constants\";\nimport { Card, Image, Form, Rating } from \"semantic-ui-react\";\n\nconst Header = style.h5`\n  padding-top: 10px;\n`;\n\nconst PreferencesContainer = style.ol`\n  margin-top: -1rem;\n  padding-left: 1.0rem;\n`;\n\nconst RadioButton = style(Form.Radio)`\n  text-align: center;\n`;\n\nconst ImageResized = style(Image)`\n  height: 500px;\n  width: 100%;\n  object-fit: cover;\n`;\n\nclass Candidate extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcolor: null,\n\t\t\trate: {},\n\t\t};\n\t}\n\n\thandleSelect = (e, { value }) => {\n\t\tconst { onSelect, candidateName } = this.props;\n\t\tonSelect(candidateName);\n\t};\n\n\thandleRate = (e, { rating }) => {\n\t\tconst { onSelect, candidateName } = this.props;\n\t\tconst currRate = {\n\t\t\t[candidateName]: rating,\n\t\t};\n\t\tthis.setState({\n\t\t\trate: currRate,\n\t\t});\n\t\tonSelect(currRate);\n\t};\n\n\tgetCandidateDetails = (name) => {\n\t\tconst candidateInfo = candidates[name];\n\t\treturn candidateInfo;\n\t};\n\n\trenderRadioMethod = (candidateName, currSelection) => {\n\t\treturn (\n\t\t\t<RadioButton\n\t\t\t\tname=\"radioGroup\"\n\t\t\t\tonChange={this.handleSelect}\n\t\t\t\tchecked={candidateName === currSelection}\n\t\t\t/>\n\t\t);\n\t};\n\n\trenderRateMethod = () => {\n\t\treturn <Rating icon=\"star\" onRate={this.handleRate} maxRating={3} size=\"massive\" />;\n\t};\n\n\trender() {\n\t\tconst { candidateName, currSelection, reelect, voteMethod } = this.props;\n\t\tconst candidateInfo = this.getCandidateDetails(reelect ? candidateName : candidateName);\n\t\tconst { photoSrc, preferences } = candidateInfo || {};\n\t\tconst { color } = this.state;\n\t\tconst abstainCard = candidateName === \"Abstain\";\n\n\t\treturn (\n\t\t\t<Card color={color}>\n\t\t\t\t<ImageResized src={photoSrc} />\n\t\t\t\t<Card.Content>\n\t\t\t\t\t<Card.Header textAlign=\"center\">{candidateName}</Card.Header>\n\t\t\t\t\t{!reelect ? (\n\t\t\t\t\t\t<Card.Meta>\n\t\t\t\t\t\t\t<Header>\n\t\t\t\t\t\t\t\t{abstainCard ? \"I formally decline to vote for any candidates.\" : \"Preferences:\"}\n\t\t\t\t\t\t\t</Header>\n\t\t\t\t\t\t\t<PreferencesContainer>\n\t\t\t\t\t\t\t\t{preferences ? preferences.map((position, i) => <li key={i}>{position}</li>) : null}\n\t\t\t\t\t\t\t</PreferencesContainer>\n\t\t\t\t\t\t</Card.Meta>\n\t\t\t\t\t) : null}\n\t\t\t\t</Card.Content>\n\t\t\t\t<Card.Content extra textAlign=\"center\">\n\t\t\t\t\t{voteMethod === \"rate\"\n\t\t\t\t\t\t? this.renderRateMethod(candidateName, currSelection)\n\t\t\t\t\t\t: this.renderRadioMethod(candidateName, currSelection)}\n\t\t\t\t</Card.Content>\n\t\t\t</Card>\n\t\t);\n\t}\n}\n\nexport default Candidate;\n","import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\nconst getCandidateList = async () => {\n\tconst snapshot = await firebase.firestore().collection(\"candidateList\").get();\n\n\tlet candidates = {};\n\tsnapshot.forEach(function (doc) {\n\t\tconst position = doc.id;\n\t\tconst candidatesForPosition = doc.data();\n\t\t// for testing: console.log(position, \" => \", candidatesForPosition);\n\t\tcandidates = { ...candidates, [position]: candidatesForPosition };\n\t});\n\n\treturn candidates;\n};\n\nconst getPositions = async () => {\n\tconst candidates = await getCandidateList();\n\tconst nonEmptyCandidates = [];\n\tfor (const candidate in candidates) {\n\t\tif (Object.keys(candidates[candidate]).length) nonEmptyCandidates.push(candidate);\n\t}\n\treturn nonEmptyCandidates;\n};\n\nconst getWinners = async () => {\n\tconst snapshot = await firebase.firestore().collection(\"winners\").get();\n\n\tlet winners = {};\n\tsnapshot.forEach(function (doc) {\n\t\tconst position = doc.id;\n\t\tconst winnerForPosition = doc.data();\n\t\twinners = { ...winners, [position]: winnerForPosition };\n\t});\n\n\treturn winners;\n};\n\nexport { getCandidateList, getPositions, getWinners };\n","import React, { Component } from \"react\";\nimport Candidate from \"./Candidate\";\nimport { getCandidateList } from \"../helper\";\nimport { Form, Card } from \"semantic-ui-react\";\nimport { reelectedCandidates } from \"../constants\";\n\nclass ListCandidates extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      candidates: {},\n      currSelection: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.setCandidateList();\n  }\n\n  setCandidateList = async () => {\n    const candidates = await getCandidateList();\n    this.setState({ candidates });\n  };\n\n  onSelect = (name) => {\n    const { updateVote, position, reelect } = this.props;\n    const candidateName = reelect ? Object.keys(name) : name;\n    const candidateRanking = reelect ? Object.values(name) : null;\n    this.setState({ currSelection: name });\n    updateVote({ position, candidateName, candidateRanking });\n  };\n\n  renderCandidates = (position) => {\n    const { reelect, voteMethod } = this.props;\n    const { candidates, currSelection } = this.state;\n    let currCandidates;\n    if (reelect) {\n      currCandidates = reelectedCandidates;\n    } else if (candidates[position]) {\n      currCandidates = candidates[position];\n    }\n\n    if (currCandidates) {\n      return Object.keys(currCandidates)\n        .sort()\n        .reverse()\n        .map((candidateName) => (\n          <Candidate\n            position={position}\n            key={candidateName}\n            candidateName={candidateName}\n            currSelection={currSelection}\n            onSelect={this.onSelect}\n            reelect={reelect}\n            voteMethod={voteMethod}\n          />\n        ));\n    }\n  };\n\n  render() {\n    const { position } = this.props;\n    return (\n      <Form>\n        <Form.Group grouped widths=\"equal\">\n          <Card.Group stackable itemsPerRow={3}>\n            {this.renderCandidates(position)}\n          </Card.Group>\n        </Form.Group>\n      </Form>\n    );\n  }\n}\n\nexport default ListCandidates;\n","import React, { Component } from \"react\";\nimport style from \"styled-components\";\nimport Position from \"./Position\";\nimport VoteDone from \"./VoteDone\";\nimport ListCandidates from \"./ListCandidates\";\nimport { getPositions, getCandidateList } from \"../helper\";\nimport { REELECT, reelectedPositions } from \"../constants\";\nimport { Grid, Button, Progress, Divider, Loader, Dimmer } from \"semantic-ui-react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\nconst VOTE_METHOD = {\n\tRADIO: \"radio\",\n\tRATE: \"rate\",\n};\n\nconst VoteHeader = style.h1`\n  font-size: 80px !important;\n  text-align: center;\n`;\n\nconst Subheader = style.h2`\n  text-align: center;\n  margin-top: 0.5rem !important;\n`;\n\nconst ProgressBar = style(Progress)`\n  margin-top: 1.8rem !important;\n`;\n\nconst DividerPadded = style(Divider)`\n  margin-top: 3rem !important;\n`;\n\nconst SubmitButton = style(Button)`\n  align-self: center;\n  margin-top: 3rem !important;\n`;\n\nclass Vote extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tvotes: {},\n\t\t\tpositions: {},\n\t\t\tcandidates: {},\n\t\t\tredirect: false,\n\t\t\tloading: true,\n\t\t\treelect: REELECT,\n\t\t\tvoteMethod: VOTE_METHOD.RADIO,\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.initVote();\n\t\tthis.setCandidateList();\n\t\tsetTimeout(() => {\n\t\t\tthis.setState({ loading: false });\n\t\t}, 2000);\n\t}\n\n\tinitVote = async () => {\n\t\t// Initialize user’s vote to have all positions set to empty strings\n\t\t// The empty strings will eventually contain the selected candidate’s name\n\t\tconst { reelect } = this.state;\n\t\tconst positions = reelect ? reelectedPositions : await getPositions();\n\t\tlet votes = {};\n\t\tpositions.forEach(function (currPosition) {\n\t\t\treelect\n\t\t\t\t? (votes = {\n\t\t\t\t\t\t...votes,\n\t\t\t\t\t\t[currPosition]: {\n\t\t\t\t\t\t\t1: null,\n\t\t\t\t\t\t\t2: null,\n\t\t\t\t\t\t\t3: null,\n\t\t\t\t\t\t},\n\t\t\t\t  })\n\t\t\t\t: (votes = {\n\t\t\t\t\t\t...votes,\n\t\t\t\t\t\t[currPosition]: \"\",\n\t\t\t\t  });\n\t\t});\n\t\tthis.setState({ votes, positions });\n\t};\n\n\tsetCandidateList = async () => {\n\t\tconst candidates = await getCandidateList();\n\t\tthis.setState({ candidates });\n\t};\n\n\tupdateVote = (card) => {\n\t\tconst { position, candidateName, candidateRanking } = card;\n\t\tconst { votes, reelect } = this.state;\n\t\tconst currVote = reelect\n\t\t\t? {\n\t\t\t\t\t[position]: {\n\t\t\t\t\t\t...votes[position],\n\t\t\t\t\t\t[candidateRanking]: candidateName,\n\t\t\t\t\t},\n\t\t\t  }\n\t\t\t: {\n\t\t\t\t\t[position]: candidateName,\n\t\t\t  };\n\t\tthis.setState({\n\t\t\tvotes: {\n\t\t\t\t...votes,\n\t\t\t\t...currVote,\n\t\t\t},\n\t\t});\n\t};\n\n\trenderPositions = () => {\n\t\tconst { positions, reelect, voteMethod } = this.state;\n\t\tconst positionHasCandidates = reelect ? reelectedPositions.length : positions.length;\n\n\t\tif (positionHasCandidates) {\n\t\t\tconst allPositions = reelect ? reelectedPositions : positions;\n\t\t\treturn allPositions.map((currPosition, i) => [\n\t\t\t\t<Position key={currPosition} name={currPosition} />,\n\t\t\t\t<ListCandidates\n\t\t\t\t\tkey={\"candidatesFor\" + currPosition}\n\t\t\t\t\tupdateVote={this.updateVote}\n\t\t\t\t\tposition={currPosition}\n\t\t\t\t\treelect={reelect}\n\t\t\t\t\tvoteMethod={voteMethod}\n\t\t\t\t/>,\n\t\t\t\t<DividerPadded key={\"positionForCandidate\" + i} />,\n\t\t\t]);\n\t\t}\n\t};\n\n\tvalidVote = () => {\n\t\tconst { votes } = this.state;\n\n\t\t// TODO: revert this for full election\n\t\t// let valid = Object.keys(votes).every(function (position) {\n\t\t//   const currVote = votes[position];\n\t\t//   return currVote.length > 1;\n\t\t// });\n\n\t\t// return valid;\n\n\t\tlet num_votes = 0;\n\t\tObject.keys(votes).forEach(function (position) {\n\t\t\tif (votes[position]) num_votes += 1;\n\t\t});\n\n\t\treturn num_votes >= 1;\n\t};\n\n\thandleSubmit = () => {\n\t\tconst { voter } = this.props;\n\t\tif (!voter) {\n\t\t\tconsole.log(\"ERROR: Voter did not validate\");\n\t\t\treturn 1;\n\t\t}\n\n\t\tthis.addVote();\n\t\tthis.updateVoteCount();\n\t\tthis.setState({ redirect: true });\n\t};\n\n\taddVote = () => {\n\t\tconst { voter } = this.props;\n\t\tconst email = voter[\"email\"];\n\n\t\tfirebase\n\t\t\t.database()\n\t\t\t.ref()\n\t\t\t.child(\"voters\")\n\t\t\t.orderByChild(\"email\")\n\t\t\t.equalTo(email)\n\t\t\t.once(\"value\", (snapshot) => {\n\t\t\t\tconst validatedVoter = snapshot.numChildren();\n\t\t\t\tif (validatedVoter) {\n\t\t\t\t\t// If voter is within the voters database, update voter with their votes\n\t\t\t\t\tconst { votes } = this.state;\n\t\t\t\t\tconst voterWithVotes = { ...voter, votes };\n\t\t\t\t\tconst voterKey = Object.keys(snapshot.val())[0];\n\t\t\t\t\tfirebase\n\t\t\t\t\t\t.database()\n\t\t\t\t\t\t.ref(\"voters/\" + voterKey)\n\t\t\t\t\t\t.set(voterWithVotes);\n\t\t\t\t}\n\t\t\t});\n\t};\n\n\tupdateVoteCount = async () => {\n\t\tconst { votes, reelect } = this.state;\n\t\tconst increment = firebase.firestore.FieldValue.increment(1);\n\n\t\tawait Object.keys(votes).forEach((position) => {\n\t\t\tconst candidateName = votes[position];\n\t\t\tif (!candidateName) return;\n\t\t\tlet voteCount = {};\n\t\t\tconst collectionName = reelect ? \"reelectionList\" : \"candidateList\";\n\t\t\tvoteCount[`${candidateName}.numOfVotes`] = increment;\n\t\t\tfirebase.firestore().collection(collectionName).doc(position).update(voteCount);\n\t\t});\n\t};\n\n\trenderLoader = () => {\n\t\treturn (\n\t\t\t<Dimmer page active inverted>\n\t\t\t\t<Loader size=\"massive\">Loading</Loader>\n\t\t\t</Dimmer>\n\t\t);\n\t};\n\n\trender() {\n\t\tconst validVote = this.validVote();\n\t\tconst { redirect, loading } = this.state;\n\t\tif (redirect) {\n\t\t\treturn <VoteDone />;\n\t\t}\n\n\t\treturn (\n\t\t\t<Grid centered>\n\t\t\t\t<Grid.Column width={10}>\n\t\t\t\t\t<VoteHeader>Vote</VoteHeader>\n\t\t\t\t\t<Subheader>Hover over the position name to get its description.</Subheader>\n\t\t\t\t\t<Subheader>\n\t\t\t\t\t\tIf you leave this page before submitting, your vote will not be counted.\n\t\t\t\t\t</Subheader>\n\t\t\t\t\t<ProgressBar color=\"blue\" percent={75}></ProgressBar>\n\t\t\t\t\t<Divider />\n\t\t\t\t\t{loading\n\t\t\t\t\t\t? this.renderLoader()\n\t\t\t\t\t\t: [\n\t\t\t\t\t\t\t\tthis.renderPositions(),\n\t\t\t\t\t\t\t\t<SubmitButton\n\t\t\t\t\t\t\t\t\tfluid\n\t\t\t\t\t\t\t\t\tkey=\"submit\"\n\t\t\t\t\t\t\t\t\tsize=\"massive\"\n\t\t\t\t\t\t\t\t\tdisabled={!validVote}\n\t\t\t\t\t\t\t\t\tcolor=\"blue\"\n\t\t\t\t\t\t\t\t\tonClick={this.handleSubmit}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t\t</SubmitButton>,\n\t\t\t\t\t\t  ]}\n\t\t\t\t</Grid.Column>\n\t\t\t</Grid>\n\t\t);\n\t}\n}\n\nexport default Vote;\n","import React, { Component, Fragment } from \"react\";\nimport style from \"styled-components\";\nimport { getPositions, getCandidateList, getWinners } from \"../helper\";\nimport { Card, Divider, Image, Placeholder } from \"semantic-ui-react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport { yearRange } from \"../constants\";\n\nconst ResultsHeader = style.h1`\n  font-size: 80px !important;\n  text-align: center;\n`;\n\nconst Subheader = style.h2`\n  text-align: center;\n  padding-bottom: 30px;\n`;\n\nconst PlaceholderContainer = style(Placeholder)`\n  max-width: 500px !important;\n  height: 400px !important;\n`;\n\nconst resultsPending =\n  `We're still counting. Come back soon to see the new executive team for ${yearRange}!`;\n\nconst resultsComputed =\n  `Thank you all for coming out! This is our new executive team for ${yearRange}.`;\n\n// Manual computation of winners\nconst MANUAL = true;\n\nclass Results extends Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: false,\n      candidateList: {},\n      winners: {}\n    };\n  }\n\n  async componentDidMount() {\n    // Initialize results array with positions as keys\n    const positions = await getPositions();\n    const candidateList = await getCandidateList();\n    const winners = MANUAL\n      ? await this.getWinners()\n      : await this.computeWinners();\n    this.setState({ results: positions, candidateList, winners });\n  }\n\n  computeWinners = async () => {\n    const { candidateList } = this.state;\n    Object.keys(candidateList).map((currPosition) => {\n      const currCandidates = candidateList[currPosition];\n      const winnerForPosition = this.getWinnerForPosition(currCandidates);\n      this.addWinner(currPosition, winnerForPosition);\n      return { [currPosition]: winnerForPosition };\n    });\n    const winners = await this.getWinners();\n    return winners;\n  };\n\n  addWinner = async (position, winner) => {\n    await firebase\n      .firestore()\n      .collection(\"winners\")\n      .doc(position)\n      .set({ winner });\n  };\n\n  getWinners = async () => {\n    if (MANUAL) {\n      return await getWinners();\n    }\n\n    const snapshot = await firebase.firestore().collection(\"winners\").get();\n\n    let winners = {};\n    snapshot.forEach(function (doc) {\n      const position = doc.id;\n      const candidatesForPosition = doc.data();\n      // for testing: console.log(position, \" => \", candidatesForPosition);\n      winners = { ...winners, [position]: candidatesForPosition };\n    });\n\n    return winners;\n  };\n\n  getWinnerForPosition = (candidates) => {\n    let max = 0;\n    let winner = [];\n    Object.values(candidates).forEach((currCandidate) => {\n      if (currCandidate[\"numOfVotes\"] > max) {\n        max = currCandidate[\"numOfVotes\"];\n        winner = [currCandidate];\n      } else if (currCandidate[\"numOfVotes\"] === max) {\n        const tiedWith = [currCandidate];\n        winner = [...winner, ...tiedWith];\n      }\n    });\n\n    return winner;\n  };\n\n  getWinner = (position, winners) => {\n    if (winners[position].length > 2) {\n      return \"Placeholder Winner\";\n    }\n    return Object.keys(winners[position]);\n  };\n\n  getWinnerPhoto = (position, winners) => {\n    if (Object.keys(winners).length > 0) {\n      const winnerName = Object.keys(winners[position]);\n      const photoSrc = winners[position][winnerName][\"photoSrc\"];\n\n      return <Image src={photoSrc} />;\n    }\n\n  };\n\n  renderPlaceholders = () => {\n    const { loading, winners } = this.state;\n    \n    return (\n      <Card.Group itemsPerRow={5} stackable>\n        {Object.keys(winners)\n          .reverse()\n          .map((position) => (\n            <Card key={position}>\n              {loading ? (\n                <PlaceholderContainer>\n                  <Placeholder.Image square />\n                </PlaceholderContainer>\n              ) : (\n                this.getWinnerPhoto(position, winners)\n              )}\n\n              <Card.Content>\n                {loading ? (\n                  <Placeholder>\n                    <Placeholder.Header>\n                      <Placeholder.Line length=\"very short\" />\n                      <Placeholder.Line length=\"medium\" />\n                    </Placeholder.Header>\n                    <Placeholder.Paragraph>\n                      <Placeholder.Line length=\"short\" />\n                    </Placeholder.Paragraph>\n                  </Placeholder>\n                ) : (\n                  <Fragment>\n                    <Card.Header>{position}</Card.Header>\n                    <Card.Meta>{this.getWinner(position, winners)}</Card.Meta>\n                  </Fragment>\n                )}\n              </Card.Content>\n            </Card>\n          ))}\n      </Card.Group>\n    );\n  };\n\n  render() {\n    const { winners } = this.state.winners;\n\n    return (\n      <Fragment>\n        <ResultsHeader>Results</ResultsHeader>\n        {winners === 0 ? (\n          <Subheader>{resultsPending}</Subheader> ) : (\n            <div>\n              <Subheader>{resultsComputed}</Subheader>\n              <Divider />\n              {this.renderPlaceholders()}\n            </div>\n          )\n        }\n      </Fragment>\n    );\n  }\n}\n\nexport default Results;\n","import React, { Component } from \"react\";\nimport style from \"styled-components\";\nimport Vote from \"../VotePart/Vote\";\nimport Results from \"../pages/Results\";\nimport AdaBotHeadImage from \"../../assets/AdaBotHead.png\";\nimport {\n  Grid,\n  Progress,\n  Image,\n  Message,\n  Icon,\n  Button\n} from \"semantic-ui-react\";\n\nconst GridContainer = style(Grid)`\n  height: 75%;\n  align-items: center;\n`;\n\nconst VALID_PASS_CONFIG = {\n  iconName: \"check\",\n  path: \"/vote\",\n  messageBgColor: \"green\",\n  messageHeader: \"Good news!\",\n  messageContent: \"You're eligible to vote.\",\n  buttonContent: \"Start Voting\"\n};\n\nconst VALID_FAIL_CONFIG = {\n  iconName: \"x\",\n  path: \"/results\",\n  messageBgColor: \"red\",\n  messageHeader: \"Uh oh - you're not eligible!\",\n  messageContent:\n    \"It's either because you're not on the mailing list or you haven't attended an Ada's Team event. If you're interested, you can stay tune to check out the results. Otherwise, thanks for coming!\",\n  buttonContent: \"Go to Results\"\n};\n\nclass LoadEligibility extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      redirect: false,\n      iconName: \"circle notched\",\n      messageBgColor: null,\n      messageHeader: \"One moment...\",\n      messageContent: \"We are checking your eligibility to vote.\",\n      buttonName: null\n    };\n  }\n\n  componentDidMount() {\n    const { loading } = this.state;\n    const { eligible } = this.props;\n    if (loading) {\n      setTimeout(() => {\n        let newState;\n        if (eligible) {\n          newState = { ...VALID_PASS_CONFIG };\n        } else {\n          newState = { ...VALID_FAIL_CONFIG };\n        }\n\n        this.setState({\n          loading: false,\n          ...newState\n        });\n      }, 3000);\n    }\n  }\n\n  handleButtonClick = () => {\n    this.setState({ redirect: true });\n  };\n\n  render() {\n    const {\n      messageBgColor,\n      messageHeader,\n      messageContent,\n      buttonContent,\n      redirect,\n      iconName,\n      loading\n    } = this.state;\n\n    const { eligible, voter } = this.props;\n    if (redirect) {\n      return eligible ? <Vote voter={voter} /> : <Results />;\n    }\n\n    return (\n      <GridContainer verticalAlign=\"middle\" centered columns={1}>\n        <Grid.Column width={5}>\n          <Image size=\"huge\" src={AdaBotHeadImage} alt=\"Ada Bot Head\" />\n          <Progress color=\"blue\" percent={50}></Progress>\n          <Message size=\"massive\" color={messageBgColor} icon>\n            <Icon name={iconName} loading={loading} />\n            <Message.Content>\n              <Message.Header>{messageHeader}</Message.Header>\n              {messageContent}\n            </Message.Content>\n          </Message>\n          {!loading && (\n            <Button\n              onClick={this.handleButtonClick}\n              fluid\n              color=\"blue\"\n              size=\"massive\"\n            >\n              {buttonContent}\n            </Button>\n          )}\n        </Grid.Column>\n      </GridContainer>\n    );\n  }\n}\n\nexport default LoadEligibility;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport LoadEligibility from \"./LoadEligibility\";\nimport { adasTeamEventOptions } from \"../constants\";\nimport AdaBotStandingImage from \"../../assets/AdaBotStanding.png\";\nimport {\n  Grid,\n  Form,\n  Image,\n  Header,\n  Progress,\n  Icon,\n  Button\n} from \"semantic-ui-react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\nconst ImageContainer = styled(Image)`\n  width: 600px;\n  height: 600px;\n  align-self: center;\n`;\n\nconst GridContainer = styled(Grid)`\n  height: 90%;\n`;\n\nconst errors = {\n  NOT_ON_MAILING_LIST: \"The voter is not on the mailing list.\"\n};\n\nconst onError = error => {\n  const { NOT_ON_MAILING_LIST } = errors;\n  switch (error) {\n    case NOT_ON_MAILING_LIST:\n      console.log(\"ERROR:\", NOT_ON_MAILING_LIST);\n      break;\n    default:\n      console.log(\"ERROR\");\n  }\n};\n\nclass ValidateVoterPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      adasTeamEvent: [],\n      agreeToBeHonest: false,\n      redirect: false,\n      eligible: undefined,\n      ineligibleSubmitted: false,\n      redirectAfterSubmitTo: \"\",\n      voter: undefined\n    };\n  }\n\n  handleEmailChange = (e, { value }) => this.setState({ email: value });\n\n  handleDropdownChange = (e, { value }) =>\n    this.setState({ adasTeamEvent: value });\n\n  handleCheckboxChange = (e, { checked }) =>\n    this.setState({ agreeToBeHonest: checked });\n\n  validateAndAddVoter = voter => {\n    // (Step 1) Retrieve mailing list from cloud firestore and check email\n    const { email } = voter;\n    const mailingListRef = firebase\n      .firestore()\n      .collection(\"filteredMailingList\")\n      .doc(email);\n\n    mailingListRef\n      .get()\n      .then(docData => {\n        if (docData.exists) {\n          // document exists (online/offline)\n          this.addVoter(voter);\n        } else {\n          // document does not exist (only on online)\n          onError(errors.NOT_ON_MAILING_LIST);\n          this.setState({ eligible: false, redirect: true });\n        }\n      })\n      .catch(fail => {\n        console.log(\"ERROR: Promise failed\");\n        // Either\n        // 1. failed to read due to some reason such as permission denied ( online )\n        // 2. failed because document does not exists on local storage ( offline )\n      });\n  };\n\n  addVoter = voter => {\n    // (Step 2) Retrieve email from realtime DB to allow revotes (replace old vote)\n    const { email } = voter;\n    const votersRef = firebase.database().ref(\"voters\");\n    firebase\n      .database()\n      .ref()\n      .child(\"voters\")\n      .orderByChild(\"email\")\n      .equalTo(email)\n      .once(\"value\", snapshot => {\n        const hasVotedBefore = snapshot.numChildren();\n        if (hasVotedBefore) {\n          // If want to revote, allow them to proceed by replacing their entry\n          const voterKey = Object.keys(snapshot.val())[0];\n          firebase\n            .database()\n            .ref(\"voters/\" + voterKey)\n            .set(voter);\n        } else {\n          votersRef.push(voter);\n        }\n      });\n\n    // Set eligible to false if user did not attend any Ada's Team events\n    const { adasTeamEvent } = voter;\n    const eligible =\n      adasTeamEvent.length === 1 &&\n      adasTeamEvent[0] === \"None, but I look forward to!\"\n        ? false\n        : true;\n\n    this.setState({ eligible, redirect: true, voter });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { email, adasTeamEvent, agreeToBeHonest } = this.state;\n    const ccid = email.match(/[^@]+/)[0];\n\n    if (email && ccid && adasTeamEvent && agreeToBeHonest) {\n      // Check voter eligibility and add accordingly\n      const voter = { ccid, email, adasTeamEvent };\n      this.validateAndAddVoter(voter);\n    }\n  };\n\n  renderHeaderText = () => {\n    return (\n      <Header size=\"huge\">\n        <Header.Content>Enter your info to vote!</Header.Content>\n        <Header.Subheader>\n          In order to cast a valid vote in the Ada's Team executive election,\n          you need to be subscribed to the mailing's list and have attended an\n          Ada's Team event or activity. Please enter your information below and\n          we'll determine your eligibility to vote.\n        </Header.Subheader>\n      </Header>\n    );\n  };\n\n  renderEligibleVoterForm = () => {\n    const { email, adasTeamEvent, agreeToBeHonest } = this.state;\n    const isInvalid =\n      !/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/.test(email) ||\n      adasTeamEvent.length === 0 ||\n      !agreeToBeHonest;\n\n    return (\n      <Form size=\"big\">\n        <Form.Input\n          label=\"Email\"\n          type=\"text\"\n          onChange={this.handleEmailChange}\n          placeholder=\"ccid@ualberta.ca\"\n        />\n        <Form.Dropdown\n          multiple\n          selection\n          label=\"Please select the Ada's Team event(s) that you attended\"\n          options={adasTeamEventOptions}\n          placeholder=\"Please select options from the dropdown\"\n          onChange={this.handleDropdownChange}\n        />\n        <Form.Checkbox\n          size=\"huge\"\n          onChange={this.handleCheckboxChange}\n          label=\"I solemnly swear I am being truthful in my answers and understand that I will be put in bad standing (banned) if proven otherwise.\"\n        />\n        <Button.Group size=\"large\">\n          <Link to=\"/\">\n            <Button animated>\n              <Button.Content visible>Back</Button.Content>\n              <Button.Content hidden>\n                <Icon name=\"arrow left\" />\n              </Button.Content>\n            </Button>\n          </Link>\n          <Button.Or />\n          <Button\n            animated\n            disabled={isInvalid}\n            color=\"blue\"\n            type=\"submit\"\n            onClick={this.handleSubmit}\n          >\n            <Button.Content visible>Next</Button.Content>\n            <Button.Content hidden>\n              <Icon name=\"arrow right\" />\n            </Button.Content>\n          </Button>\n        </Button.Group>\n      </Form>\n    );\n  };\n\n  render() {\n    const { redirect, eligible, voter } = this.state;\n    if (redirect) {\n      return <LoadEligibility voter={voter} eligible={eligible} />;\n    }\n    return (\n      <GridContainer verticalAlign=\"middle\" centered>\n        <ImageContainer src={AdaBotStandingImage} />\n        <Grid.Column width={6}>\n          <Progress color=\"blue\" percent={25}></Progress>\n          {this.renderHeaderText()}\n          {this.renderEligibleVoterForm()}\n        </Grid.Column>\n      </GridContainer>\n    );\n  }\n}\n\nexport default ValidateVoterPage;\n","import React, { Fragment } from \"react\";\nimport style from \"styled-components\";\nimport { Item, Divider } from \"semantic-ui-react\";\nimport { candidates, REELECT, reelectedCandidates } from \"../constants\";\n\nconst CandidatesHeader = style.h1`\n  font-size: 80px !important;\n  text-align: center;\n`;\n\nconst Subheader = style.h2`\n  text-align: center;\n  padding-bottom: 30px;\n`;\n\nconst CandidateName = style.h1`\n    font-size: 30px; \n`;\n\nconst CandidateSpeech = style.h3`\n    font-size: 20px;\n    font-weight: lighter;\n`;\n\nconst CandidatePreferences = style.li`\n    font-size: 20px;\n    font-weight: lighter;\n`;\n\nconst CandidatePage = () => {\n  const showCandidates = REELECT ? reelectedCandidates : candidates;\n\n  return (\n    <Fragment>\n      <CandidatesHeader>Candidates</CandidatesHeader>\n      <Subheader>\n        Please take a moment to read their speeches before voting.\n      </Subheader>\n      <Divider />\n      <Item.Group divided stackable=\"true\">\n        {showCandidates ? (\n          Object.keys(showCandidates)\n            .sort()\n            .map((currCandidate) =>\n              candidates[currCandidate].name === \"Abstain\" ? null : (\n                <Item key={currCandidate}>\n                  <Item.Image\n                    centered\n                    size=\"medium\"\n                    src={showCandidates[currCandidate].photoSrc}\n                  />\n                  <Item.Content verticalAlign=\"top\">\n                    <CandidateName>\n                      {candidates[currCandidate].name}\n                    </CandidateName>\n                    <CandidateSpeech>\n                      {candidates[currCandidate].speech}\n                    </CandidateSpeech>\n                    <ul>\n                      {candidates[currCandidate].preferences.map((preference) => (\n                        <CandidatePreferences key={preference}>\n                          {preference}\n                        </CandidatePreferences>\n                      ))}\n                    </ul>\n                  </Item.Content>\n                  <Divider />\n                </Item>\n              )\n            )\n        ) : (\n          <Subheader>Coming soon!</Subheader>\n        )}\n      </Item.Group>\n    </Fragment>\n  );\n};\n\nexport default CandidatePage;\n","import React, { Fragment } from \"react\";\nimport \"./App.css\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/pages/HomePage\";\nimport Valid from \"./components/ValidateVoter/ValidateVoterPage\";\nimport VotePart from \"./components/VotePart/Vote\";\nimport Results from \"./components/pages/Results\";\nimport CandidatePage from \"./components/pages/CandidatesPage\";\n\nfunction App() {\n  return (\n    <Fragment>\n      <Header />\n      <Switch>\n        <Route exact path=\"/\" component={Main} />\n        <Route exact path=\"/validate\" component={Valid} />\n        <Route exact path=\"/vote\" component={VotePart} />\n        <Route exact path=\"/results\" component={Results} />\n        <Route exact path=\"/candidates\" component={CandidatePage} />\n      </Switch>\n    </Fragment>\n  );\n}\n\nexport default App;\n","import React from \"react\";\n\nconst FirebaseContext = React.createContext(null);\n\nexport default FirebaseContext;\n","import FirebaseContext from \"./context\";\nimport Firebase from \"./firebase\";\n\nexport default Firebase;\n\nexport { FirebaseContext };\n","import app from \"firebase/app\";\nimport \"firebase/database\";\nimport FirebaseContext from \"./context\";\nimport * as firebaseConfig from \"./config/config\";\nclass Firebase {\n  constructor() {\n    app.initializeApp(firebaseConfig);\n    this.db = app.database();\n  }\n}\n\nexport default Firebase;\nexport { FirebaseContext };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Firebase, { FirebaseContext } from \"./firebase\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <FirebaseContext.Provider value={new Firebase()}>\n      <App />\n    </FirebaseContext.Provider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n","module.exports = __webpack_public_path__ + \"static/media/AdaBotHead.8cfadb42.png\";"],"sourceRoot":""}